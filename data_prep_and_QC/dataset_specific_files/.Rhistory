require(plyr)
library(tidyverse)
library(R.matlab)
univariate_feature_set <- "catch22"
subject_csv <- "participants.csv"
github_dir <- "/headnode1/abry4213/github/fMRI_FeaturesDisorders/"
data_path <- "/headnode1/abry4213/UCLA_Schizophrenia/data/raw_data/"
dataset_ID <- "UCLA_Schizophrenia"
input_mat_file = "UCLA_time_series_four_groups.mat"
noise_procs <- c("AROMA+2P", "AROMA+2P+GMR", "AROMA+2P+DiCER")
parcellation_name <- "aparc+aseg"
brain_region_lookup <- ""
cat("\nLoading in .mat file:", input_mat_file, "\n")
mat_data <- readMat(input_mat_file)
input_mat_file = paste0(data_path, input_mat_file)
mat_data <- readMat(input_mat_file)
# UCLA schizophrenia
data_path <- "/headnode1/abry4213/UCLA_Schizophrenia/data/raw_data/"
# UCLA schizophrenia
data_path <- "/headnode1/abry4213/data/UCLA_Schizophrenia/raw_data/"
input_mat_file = paste0(data_path, input_mat_file)
# UCLA schizophrenia
# data_path <- "/headnode1/abry4213/data/UCLA_Schizophrenia/raw_data/"
# dataset_ID <- "UCLA_Schizophrenia"
input_mat_file = "UCLA_time_series_four_groups.mat"
input_mat_file = paste0(data_path, input_mat_file)
mat_data <- readMat(input_mat_file)
# Define output directory for time-series .txt files
ts_output_dir <- paste0(data_path, "time_series_files/")
Noise_Proc <- reshape2::melt(mat_data$noiseOptions) %>%
dplyr::rename("noiseOptions" = "L1",
"Noise_Proc" = "value") %>%
distinct(Noise_Proc, noiseOptions)
print(Noise_Proc)
cat("Reshaping data from wide to long.\n")
TS_data_long <- reshape2::melt(mat_data$time.series) %>%
dplyr::rename(timepoint = Var1,
ROI_Index = Var2,
Subject_Index = Var3,
noiseOptions = Var4)
# Get unique IDs to join in identifiers
ids <- reshape2::melt(mat_data$subject.list) %>%
group_by(value, L1) %>%
distinct() %>%
dplyr::rename(Sample_ID = value,
Subject_Index = L1) %>%
dplyr::select(c(Sample_ID, Subject_Index))
subject_info <- read.csv(subject_csv) %>%
dplyr::rename(Sample_ID = 1) %>%
distinct(Sample_ID, diagnosis, age, gender) %>%
semi_join(., ids) %>%
mutate(diagnosis = str_to_title(diagnosis)) %>%
mutate(diagnosis = ifelse(diagnosis == "Adhd", "ADHD", diagnosis))
subject_csf = paste0()
# UCLA schizophrenia
data_path <- "/headnode1/abry4213/data/UCLA_Schizophrenia/"
# Define output directory for time-series .txt files
ts_output_dir <- paste0(data_path, "raw_data/time_series_files/")
subject_csv = paste0(data_path, subject_csv)
subject_info <- read.csv(subject_csv) %>%
dplyr::rename(Sample_ID = 1) %>%
distinct(Sample_ID, diagnosis, age, gender) %>%
semi_join(., ids) %>%
mutate(diagnosis = str_to_title(diagnosis)) %>%
mutate(diagnosis = ifelse(diagnosis == "Adhd", "ADHD", diagnosis))
subject_info <- read.csv(subject_csv) %>%
dplyr::rename(Sample_ID = 1) %>%
distinct(Sample_ID, Diagnosis, age, gender) %>%
semi_join(., ids) %>%
mutate(diagnosis = str_to_title(Diagnosis)) %>%
mutate(diagnosis = ifelse(Diagnosis == "Adhd", "ADHD", Diagnosis))
# Save .Rds file containing list of subjects with time-series data and diagnoses
saveRDS(subject_info, paste0(data_path, sprintf("%s_subjects_with_fMRI_TS_data.Rds",
dataset_ID)))
ROI_info <- reshape2::melt(mat_data$StructNames) %>%
distinct(Var1, value) %>%
dplyr::rename("ROI_Index"="Var1",
"Brain_Region"="value") %>%
mutate(Brain_Region = gsub(" +", "", Brain_Region))
TS_data_full <- inner_join(TS_data_long, ids,
by=c("Subject_Index"="Subject_Index")) %>%
inner_join(., subject_info, by=c("Sample_ID"="Sample_ID")) %>%
inner_join(., Noise_Proc, by=c("noiseOptions"="noiseOptions")) %>%
inner_join(., ROI_info, by=c("ROI_Index"="ROI_Index")) %>%
dplyr::select(-noiseOptions, -Subject_Index, -ROI_Index)
# Separate data into TS versus metadata
metadata <- TS_data_full %>%
distinct(Sample_ID, Diagnosis, age, gender)
saveRDS(metadata, file=paste0(data_path, sprintf("%s_sample_metadata.Rds",
dataset_ID)))
noise_proc = "AROMA+2P"
noise_proc_subset = TS_data_full %>%
dplyr::filter(Noise_Proc == noise_proc)
noise_label = gsub("\\+", "_", noise_proc)
np_output_dir = paste0(ts_output_dir, noise_label, "/")
icesTAF::mkdir(np_output_dir)
noise_proc_subset %>%
filter(Sample_ID == "sub-10159")
TS_data_long <- reshape2::melt(mat_data$time.series) %>%
dplyr::rename(timepoint = Var1,
Index = Var2,
Subject_Index = Var3,
noiseOptions = Var4)
ROI_info <- reshape2::melt(mat_data$StructNames) %>%
distinct(Var1, value) %>%
dplyr::rename("Index"="Var1",
"Brain_Region"="value") %>%
mutate(Brain_Region = gsub(" +", "", Brain_Region))
saveRDS(ROI_info, file=paste0(data_path, sprintf("%s_Brain_Region_Lookup.Rds",
dataset_ID)))
TS_data_full <- inner_join(TS_data_long, ids,
by=c("Subject_Index"="Subject_Index")) %>%
inner_join(., subject_info, by=c("Sample_ID"="Sample_ID")) %>%
inner_join(., Noise_Proc, by=c("noiseOptions"="noiseOptions")) %>%
dplyr::select(-noiseOptions, -Subject_Index)
noise_label = gsub("\\+", "_", noise_proc)
noise_proc_subset = TS_data_full %>%
dplyr::filter(Noise_Proc == noise_proc)
# Make output directory
np_output_dir = paste0(ts_output_dir, noise_label, "/")
icesTAF::mkdir(np_output_dir)
noise_proc_subset %>%
filter(Sample_ID == "sub-10159") %>%
dplyr::select(timepoint, Index)
noise_proc_subset %>%
filter(Sample_ID == "sub-10159") %>%
dplyr::select(timepoint, Index) %>%
head()
noise_proc_subset %>%
filter(Sample_ID == "sub-10159") %>%
dplyr::select(timepoint, Index, value) %>%
head()
sample="sub-10159"
noise_proc_subset %>%
filter(Sample_ID == sample) %>%
dplyr::select(timepoint, Index, value) %>%
pivot_wider(names_from=Index, values_from=timepoint)
noise_proc_subset %>%
filter(Sample_ID == sample) %>%
dplyr::select(timepoint, Index, value) %>%
pivot_wider(names_from=Index, values_from=value)
?write.table
?write.csv
for (sample in unique(noise_proc_subset$Sample_ID)) {
noise_proc_subset %>%
filter(Sample_ID == sample) %>%
dplyr::select(timepoint, Index, value) %>%
pivot_wider(names_from=Index, values_from=value) %>%
write.csv(.,
file = paste0(np_output_dir, sample, "_TS.csv"),
col.names = F, row.names=F)
}
for (noise_proc in Noise_Proc$Noise_Proc) {
noise_label = gsub("\\+", "_", noise_proc)
noise_proc_subset = TS_data_full %>%
dplyr::filter(Noise_Proc == noise_proc)
# Make output directory
np_output_dir = paste0(ts_output_dir, noise_label, "/")
icesTAF::mkdir(np_output_dir)
# Save a .csv file per sample
for (sample in unique(noise_proc_subset$Sample_ID)) {
noise_proc_subset %>%
filter(Sample_ID == sample) %>%
dplyr::select(timepoint, Index, value) %>%
pivot_wider(names_from=Index, values_from=value) %>%
write.csv(.,
file = paste0(np_output_dir, sample, "_TS.csv"),
col.names = F, row.names=F)
}
}
univariate_feature_set <- "catch22"
subject_csv <- "participants.csv"
github_dir <- "/headnode1/abry4213/github/fMRI_FeaturesDisorders/"
data_path <- "/headnode1/abry4213/data/ABIDE_ASD/"
dataset_ID <- "ABIDE_ASD"
noise_procs <- "FC1000"
# Load needed libraries
library(tidyverse)
# Define output directory for time-series .txt files
ts_output_dir <- paste0(data_path, "raw_data/time_series_files/")
raw_data_input_dir <- paste0(data_path, "harvard_oxford_cort_prob_2mm/")
# Find list of subjects with rsfMRI data
samples <- list.dirs(raw_data_input_dir, full.names = F, recursive = F)
raw_data_input_dir <- paste0(data_path, "harvard_oxford_cort_prob_2mm/")
raw_data_input_dir <- paste0(data_path, "raw_data/harvard_oxford_cort_prob_2mm/")
# Find list of subjects with rsfMRI data
samples <- list.dirs(raw_data_input_dir, full.names = F, recursive = F)
# Find list of subjects with rsfMRI data
subjects <- list.dirs(raw_data_input_dir, full.names = F, recursive = F)
subject_ID <- subjects[1]
subject_csv <- paste0(raw_data_input_dir, subject_ID,
"run_1/", subject_ID, "task-Rest_confounds.csv")
output_csv_per_subject <- function(subject_ID) {
subject_csv <- paste0(raw_data_input_dir, subject_ID,
"run_1/", subject_ID, "task-Rest_confounds.csv")
output_csv <- paste0(ts_output_dir, subject_ID, "/", subject_ID, "_TS.csv")
file.copy(subject_csv, output_csv)
}
subjects %>%
purrr::map(~ output_csv_per_subject(.x))
subjects %>%
purrr::map(~ output_csv_per_subject(.x))
output_csv <- paste0(ts_output_dir, subject_ID, "/", subject_ID, "_TS.csv")
output_csv
output_csv_per_subject <- function(subject_ID) {
subject_csv <- paste0(raw_data_input_dir, subject_ID,
"run_1/", subject_ID, "task-Rest_confounds.csv")
output_csv <- paste0(ts_output_dir, subject_ID, "_TS.csv")
file.copy(subject_csv, output_csv)
}
subjects %>%
purrr::map(~ output_csv_per_subject(.x))
output_csv <- paste0(ts_output_dir, subject_ID, "_TS.csv")
output_csv
# Define output directory for time-series .txt files
ts_output_dir <- paste0(data_path, "raw_data/time_series_files/FC1000/")
output_csv_per_subject <- function(subject_ID) {
subject_csv <- paste0(raw_data_input_dir, subject_ID,
"run_1/", subject_ID, "task-Rest_confounds.csv")
output_csv <- paste0(ts_output_dir, subject_ID, "_TS.csv")
file.copy(subject_csv, output_csv)
}
subjects %>%
purrr::map(~ output_csv_per_subject(.x))
subject_csv <- paste0(raw_data_input_dir, subject_ID,
"run_1/", subject_ID, "task-Rest_confounds.csv")
output_csv <- paste0(ts_output_dir, subject_ID, "_TS.csv")
output_csv
file.copy(subject_csv, output_csv)
subject_csv <- paste0(raw_data_input_dir, subject_ID,
"run_1/", subject_ID, "_task-Rest_confounds.csv")
output_csv <- paste0(ts_output_dir, subject_ID, "_TS.csv")
file.copy(subject_csv, output_csv)
file.copy(subject_csv, ts_output_dir)
subject_csv <- paste0(raw_data_input_dir, subject_ID,
"/run_1/", subject_ID, "_task-Rest_confounds.csv")
output_csv <- paste0(ts_output_dir, subject_ID, "_TS.csv")
file.copy(subject_csv, output_csv)
output_csv_per_subject <- function(subject_ID) {
subject_csv <- paste0(raw_data_input_dir, subject_ID,
"/run_1/", subject_ID, "_task-Rest_confounds.csv")
output_csv <- paste0(ts_output_dir, subject_ID, "_TS.csv")
file.copy(subject_csv, output_csv)
}
subjects %>%
purrr::map(~ output_csv_per_subject(.x))
univariate_feature_set <- "catch22"
subject_csv <- "participants.csv"
github_dir <- "/headnode1/abry4213/github/fMRI_FeaturesDisorders/"
data_path <- "/headnode1/abry4213/data/UCLA_Schizophrenia/"
dataset_ID <- "UCLA_Schizophrenia"
noise_procs <- c("AROMA+2P", "AROMA+2P+GMR", "AROMA+2P+DiCER")
brain_region_lookup <- "Brain_Region_info.csv"
rdata_path <- paste0(data_path, "Rdata/")
plot_dir <- paste0(data_path, "plots/")
icesTAF::mkdir(plot_dir)
# Set the seed
set.seed(127)
# Load tidyverse
library(tidyverse)
library(theft)
source(paste0(helper_script_dir, "data_prep_and_QC/TS_feature_extraction.R"))
helper_script_dir = paste0(github_dir, "helper_functions/")
source(paste0(helper_script_dir, "data_prep_and_QC/TS_feature_extraction.R"))
noise_proc = "AROMA+2P"
sample_ID = "sub-10159"
noise_label <- gsub("\\+", "_", noise_proc)
TS_data <- read.csv(paste0(data_path,
"raw_data/time_series_files/",
noise_label, "/",
sample_ID, "_TS.csv"))
View(TS_data)
univariate_feature_set <- "catch22"
subject_csv <- "participants.csv"
github_dir <- "/headnode1/abry4213/github/fMRI_FeaturesDisorders/"
data_path <- "/headnode1/abry4213/data/UCLA_Schizophrenia/"
dataset_ID <- "UCLA_Schizophrenia"
input_mat_file = "UCLA_time_series_four_groups.mat"
noise_procs <- c("AROMA+2P", "AROMA+2P+GMR", "AROMA+2P+DiCER")
# Load needed libraries
require(plyr)
library(tidyverse)
library(R.matlab)
# Define output directory for time-series .txt files
ts_output_dir <- paste0(data_path, "raw_data/time_series_files/")
source("~/github/fMRI_FeaturesDisorders/data_prep_and_QC/dataset_specific_files/prepare_UCLA_Schizophrenia_time_series.R")
mat_data_into_TXT_files(input_mat_file=paste0(data_path,
"raw_data/",
input_mat_file),
dataset_ID = dataset_ID,
subject_csv=paste0(data_path, subject_csv),
data_path=data_path)
noise_label <- gsub("\\+", "_", noise_proc)
TS_data <- read.csv(paste0(data_path,
"raw_data/time_series_files/",
noise_label, "/",
sample_ID, "_TS.csv"))
TS_data <- read.csv(paste0(data_path,
"raw_data/time_series_files/",
noise_label, "/",
sample_ID, "_TS.csv")) %>%
mutate(timepoint = 1:nrow(.)) %>%
pivot_longer(cols = c(-timepoint),
names_to = "Brain_Region_Index",
values_to = "values")
TS_data <- read.csv(paste0(data_path,
"raw_data/time_series_files/",
noise_label, "/",
sample_ID, "_TS.csv")) %>%
mutate(timepoint = 1:nrow(.)) %>%
pivot_longer(cols = c(-timepoint),
names_to = "Brain_Region_Index",
values_to = "values") %>%
mutate(Sample_ID = sample_ID,
Noise_Proc = noise_proc)
TS_data <- read.csv(paste0(data_path,
"raw_data/time_series_files/",
noise_label, "/",
sample_ID, "_TS.csv")) %>%
mutate(timepoint = 1:nrow(.)) %>%
pivot_longer(cols = c(-timepoint),
names_to = "Brain_Region_Index",
values_to = "values") %>%
mutate(Sample_ID = sample_ID,
Noise_Proc = noise_proc,
Brain_Region_Index = as.numeric(gsub("X", "", Brain_Region_Index)))
# DIY rlist::list.append
list.append <- function (.data, ...)
{
if (is.list(.data)) {
c(.data, list(...))
}
else {
c(.data, ..., recursive = FALSE)
}
}
noise_proc_TS_data_list <- list()
noise_label <- gsub("\\+", "_", noise_proc)
list.files(paste0(data_path, "raw_data/time_series_files/", noise_label)) %>%
gsub("_TS.csv", "", .)
#-------------------------------------------------------------------------------
# Read in TS data for dataset, partitioned by noise-processing method
#-------------------------------------------------------------------------------
read_in_sample_TS_data <- function(sample_ID, noise_proc) {
noise_label <- gsub("\\+", "_", noise_proc)
TS_data <- read.csv(paste0(data_path,
"raw_data/time_series_files/",
noise_label, "/",
sample_ID, "_TS.csv")) %>%
mutate(timepoint = 1:nrow(.)) %>%
pivot_longer(cols = c(-timepoint),
names_to = "Brain_Region_Index",
values_to = "values") %>%
mutate(Sample_ID = sample_ID,
Noise_Proc = noise_proc,
Brain_Region_Index = as.numeric(gsub("X", "", Brain_Region_Index)))
}
noise_proc_TS_data_list <- list()
for (noise_proc in noise_procs) {
noise_label <- gsub("\\+", "_", noise_proc)
sample_IDs <- list.files(paste0(data_path, "raw_data/time_series_files/", noise_label)) %>%
gsub("_TS.csv", "", .)
np_TS_data <- sample_IDs %>%
purr::map_df(~ read_in_sample_TS_data(sample_ID = .x,
noise_proc = noise_proc))
noise_proc_TS_data_list <- list.append(noise_proc_TS_data_list, np_TS_data)
}
for (noise_proc in noise_procs) {
noise_label <- gsub("\\+", "_", noise_proc)
sample_IDs <- list.files(paste0(data_path, "raw_data/time_series_files/", noise_label)) %>%
gsub("_TS.csv", "", .)
np_TS_data <- sample_IDs %>%
purrr::map_df(~ read_in_sample_TS_data(sample_ID = .x,
noise_proc = noise_proc))
noise_proc_TS_data_list <- list.append(noise_proc_TS_data_list, np_TS_data)
}
full_TS_data <- do.call(plyr::rbind.fill, noise_proc_TS_data)
full_TS_data <- do.call(plyr::rbind.fill, noise_proc_TS_data_list)
saveRDS(full_TS_data, paste0(data_path, "raw_data/", dataset_ID, "_fMRI_TS.Rds"))
# Load brain region lookup table
brain_region_lookup_table <- read.csv(paste0(data_path, brain_region_lookup))
noise_label <- gsub("\\+", "_", noise_proc)
TS_data <- read.csv(paste0(data_path,
"raw_data/time_series_files/",
noise_label, "/",
sample_ID, "_TS.csv")) %>%
mutate(timepoint = 1:nrow(.)) %>%
pivot_longer(cols = c(-timepoint),
names_to = "Index",
values_to = "values") %>%
mutate(Sample_ID = sample_ID,
Noise_Proc = noise_proc,
Index = as.numeric(gsub("X", "", Index))) %>%
left_join(., brain_region_lookup_table) %>%
dplyr::select(Sample_ID, Noise_Proc, Brain_Region, timepoint, value)
noise_label <- gsub("\\+", "_", noise_proc)
TS_data <- read.csv(paste0(data_path,
"raw_data/time_series_files/",
noise_label, "/",
sample_ID, "_TS.csv")) %>%
mutate(timepoint = 1:nrow(.)) %>%
pivot_longer(cols = c(-timepoint),
names_to = "Index",
values_to = "values") %>%
mutate(Sample_ID = sample_ID,
Noise_Proc = noise_proc,
Index = as.numeric(gsub("X", "", Index))) %>%
left_join(., brain_region_lookup_table) %>%
dplyr::select(Sample_ID, Noise_Proc, Brain_Region, timepoint, values)
brain_region_lookup_table <- read.csv(paste0(data_path, brain_region_lookup))
read_in_sample_TS_data <- function(sample_ID, noise_proc,
brain_region_lookup_table) {
noise_label <- gsub("\\+", "_", noise_proc)
TS_data <- read.csv(paste0(data_path,
"raw_data/time_series_files/",
noise_label, "/",
sample_ID, "_TS.csv")) %>%
mutate(timepoint = 1:nrow(.)) %>%
pivot_longer(cols = c(-timepoint),
names_to = "Index",
values_to = "values") %>%
mutate(Sample_ID = sample_ID,
Noise_Proc = noise_proc,
Index = as.numeric(gsub("X", "", Index))) %>%
left_join(., brain_region_lookup_table) %>%
dplyr::select(Sample_ID, Noise_Proc, Brain_Region, timepoint, values)
}
if (!file.exists(paste0(data_path, "raw_data/", dataset_ID, "_fMRI_TS.Rds"))) {
noise_proc_TS_data_list <- list()
for (noise_proc in noise_procs) {
noise_label <- gsub("\\+", "_", noise_proc)
sample_IDs <- list.files(paste0(data_path, "raw_data/time_series_files/", noise_label)) %>%
gsub("_TS.csv", "", .)
np_TS_data <- sample_IDs %>%
purrr::map_df(~ read_in_sample_TS_data(sample_ID = .x,
noise_proc = noise_proc))
noise_proc_TS_data_list <- list.append(noise_proc_TS_data_list, np_TS_data)
}
full_TS_data <- do.call(plyr::rbind.fill, noise_proc_TS_data_list)
saveRDS(full_TS_data, paste0(data_path, "raw_data/",
dataset_ID, "_fMRI_TS.Rds"))
} else {
full_TS_data <- readRDS(paste0(data_path, "raw_data/",
dataset_ID, "_fMRI_TS.Rds"))
}
if (!file.exists(paste0(data_path, "raw_data/", dataset_ID, "_fMRI_TS.Rds"))) {
noise_proc_TS_data_list <- list()
for (noise_proc in noise_procs) {
noise_label <- gsub("\\+", "_", noise_proc)
sample_IDs <- list.files(paste0(data_path, "raw_data/time_series_files/", noise_label)) %>%
gsub("_TS.csv", "", .)
np_TS_data <- sample_IDs %>%
purrr::map_df(~ read_in_sample_TS_data(sample_ID = .x,
noise_proc = noise_proc,
brain_region_lookup_table = brain_region_lookup_table))
noise_proc_TS_data_list <- list.append(noise_proc_TS_data_list, np_TS_data)
}
full_TS_data <- do.call(plyr::rbind.fill, noise_proc_TS_data_list)
saveRDS(full_TS_data, paste0(data_path, "raw_data/",
dataset_ID, "_fMRI_TS.Rds"))
} else {
full_TS_data <- readRDS(paste0(data_path, "raw_data/",
dataset_ID, "_fMRI_TS.Rds"))
}
source("~/github/fMRI_FeaturesDisorders/helper_functions/data_prep_and_QC/TS_feature_extraction.R")
catch22_all_samples(full_TS_data = full_TS_data,
rdata_path = rdata_path,
dataset_ID = dataset_ID,
unique_columns = c("Sample_ID", "Brain_Region", "Noise_Proc"),
output_column_names = c("Sample_ID", "Brain_Region", "Noise_Proc"))
source("~/github/fMRI_FeaturesDisorders/helper_functions/data_prep_and_QC/TS_feature_extraction.R")
source("~/github/fMRI_FeaturesDisorders/helper_functions/data_prep_and_QC/TS_feature_extraction.R")
catch22_all_samples(full_TS_data = full_TS_data,
rdata_path = rdata_path,
dataset_ID = dataset_ID,
unique_columns = c("Sample_ID", "Brain_Region", "Noise_Proc"),
output_column_names = c("Sample_ID", "Brain_Region", "Noise_Proc"))
source("~/github/fMRI_FeaturesDisorders/helper_functions/data_prep_and_QC/TS_feature_extraction.R")
catch22_all_samples(full_TS_data = full_TS_data,
rdata_path = rdata_path,
dataset_ID = dataset_ID,
unique_columns = c("Sample_ID", "Brain_Region", "Noise_Proc"),
output_column_names = c("Sample_ID", "Brain_Region", "Noise_Proc"))
