univariate_feature_set <- "catch22"
subject_csv <- "participants.csv"
github_dir <- "/headnode1/abry4213/github/fMRI_FeaturesDisorders/"
data_path <- "/headnode1/abry4213/data/ABIDE_ASD/"
dataset_ID <- "ABIDE_ASD"
noise_procs <- c("FC1000")
brain_region_lookup <- "Harvard_Oxford_cort_prob_2mm_ROI_lookup.csv"
rdata_path <- paste0(data_path, "processed_data/Rdata/")
plot_dir <- paste0(data_path, "plots/")
icesTAF::mkdir(plot_dir)
library(tidyverse)
library(theft)
helper_script_dir = paste0(github_dir, "helper_functions/")
source(paste0(helper_script_dir, "data_prep_and_QC/TS_feature_extraction.R"))
source(paste0(helper_script_dir, "data_prep_and_QC/QC_functions.R"))
system(sprintf("Rscript %s/data_prep_and_QC/dataset_specific_files/prepare_%s_time_series.R",
github_dir, dataset_ID))
# Load brain region lookup table
brain_region_lookup_table <- read.csv(paste0(data_path, brain_region_lookup))
read_in_sample_TS_data <- function(sample_ID, noise_proc,
brain_region_lookup_table) {
noise_label <- gsub("\\+", "_", noise_proc)
TS_data <- read.csv(paste0(data_path,
"raw_data/time_series_files/",
noise_label, "/",
sample_ID, "_TS.csv")) %>%
mutate(timepoint = 1:nrow(.)) %>%
pivot_longer(cols = c(-timepoint),
names_to = "Index",
values_to = "values") %>%
mutate(Sample_ID = sample_ID,
Noise_Proc = noise_proc,
Index = as.numeric(gsub("X", "", Index))) %>%
left_join(., brain_region_lookup_table) %>%
dplyr::select(Sample_ID, Noise_Proc, Brain_Region, timepoint, values)
}
if (!file.exists(paste0(data_path, "raw_data/", dataset_ID, "_fMRI_TS.Rds"))) {
noise_proc_TS_data_list <- list()
for (noise_proc in noise_procs) {
noise_label <- gsub("\\+", "_", noise_proc)
sample_IDs <- list.files(paste0(data_path, "raw_data/time_series_files/", noise_label)) %>%
gsub("_TS.csv", "", .)
np_TS_data <- sample_IDs %>%
purrr::map_df(~ read_in_sample_TS_data(sample_ID = .x,
noise_proc = noise_proc,
brain_region_lookup_table = brain_region_lookup_table))
noise_proc_TS_data_list <- list.append(noise_proc_TS_data_list, np_TS_data)
}
full_TS_data <- do.call(plyr::rbind.fill, noise_proc_TS_data_list)
saveRDS(full_TS_data, paste0(data_path, "raw_data/",
dataset_ID, "_fMRI_TS.Rds"))
} else {
full_TS_data <- readRDS(paste0(data_path, "raw_data/",
dataset_ID, "_fMRI_TS.Rds"))
}
list.append <- function (.data, ...)
{
if (is.list(.data)) {
c(.data, list(...))
}
else {
c(.data, ..., recursive = FALSE)
}
}
noise_proc_TS_data_list <- list.append(noise_proc_TS_data_list, np_TS_data)
full_TS_data <- do.call(plyr::rbind.fill, noise_proc_TS_data_list)
saveRDS(full_TS_data, paste0(data_path, "raw_data/",
dataset_ID, "_fMRI_TS.Rds"))
catch22_all_samples(full_TS_data = full_TS_data,
rdata_path = rdata_path,
dataset_ID = dataset_ID,
unique_columns = c("Sample_ID", "Brain_Region", "Noise_Proc"),
output_column_names = c("Sample_ID", "Brain_Region", "Noise_Proc"))
catch22_all_samples(full_TS_data = full_TS_data,
rdata_path = rdata_path,
dataset_ID = dataset_ID,
unique_columns = c("Sample_ID", "Brain_Region", "Noise_Proc"),
output_column_names = c("Sample_ID", "Brain_Region", "Noise_Proc"))
setwd("~/github/fMRI_FeaturesDisorders/helper_functions/data_prep_and_QC")
setwd("~/github/fMRI_FeaturesDisorders/data_prep_and_QC")
univariate_feature_set <- "catch22"
pairwise_feature_set <- "pyspi14"
subject_csv <- "participants.csv"
github_dir <- "/headnode1/abry4213/github/fMRI_FeaturesDisorders/"
data_path <- "/headnode1/abry4213/data/UCLA_Schizophrenia/"
dataset_ID <- "UCLA_Schizophrenia"
noise_procs <- c("AROMA+2P", "AROMA+2P+GMR", "AROMA+2P+DiCER")
brain_region_lookup <- "Brain_Region_info.csv"
pkl_path <- paste0(data_path, "raw_data/numpy_files/")
rdata_path <- paste0(data_path, "processed_data/Rdata/")
plot_dir <- paste0(data_path, "plots/")
icesTAF::mkdir(plot_dir)
list.append <- function (.data, ...)
{
if (is.list(.data)) {
c(.data, list(...))
}
else {
c(.data, ..., recursive = FALSE)
}
}
pkl_data_path <- paste0(data_path, "raw_data/numpy_files/")
# univariate_feature_set <- "catch22"
# pairwise_feature_set <- "pyspi14"
sample_csv_file <- "participants.csv"
# Load sample data
sample_data <- read.csv(sample_csv_file)
sample_csv_file = paste0(data_path, sample_csv_file)
# Load sample data
sample_data <- read.csv(sample_csv_file)
noise_prob="AROMA+2P"
noise_label = gsub("\\+", "_", noise_proc)
# Define data path for this noise processing method
np_data_path <- paste0(pkl_data_path, noise_label, "/")
noise_proc=noise_prob
noise_label = gsub("\\+", "_", noise_proc)
# Define data path for this noise processing method
np_data_path <- paste0(pkl_data_path, noise_label, "/")
np_data_path
unique(list.dirs(np_data_path, recursive = F, full.names = F))
sample="sub-10159"
list.files("/headnode1/abry4213/.conda/envs/pyspi/bin/")
python_to_use <- "/headnode1/abry4213/.conda/envs/pyspi/bin/python3"
reticulate::use_python(python_to_use)
library(reticulate)
reticulate::source_python(paste0(github_dir, "helper_scripts/data_prep_and_QC/pickle_reader.py"))
reticulate::source_python(paste0(github_dir, "helper_functions/data_prep_and_QC/pickle_reader.py"))
sample_pkl_data <- extract_df_from_pkl(paste0(np_data_path, sample, "/calc.pkl")) %>%
mutate(Sample_ID = sample,
Diagnosis = subset(sample_data, SampleID == sample) %>% pull(Diagnosis))
library(tidyverse)
sample_pkl_data <- extract_df_from_pkl(paste0(np_data_path, sample, "/calc.pkl")) %>%
mutate(Sample_ID = sample,
Diagnosis = subset(sample_data, SampleID == sample) %>% pull(Diagnosis))
sample_pkl_data <- extract_df_from_pkl(paste0(np_data_path, sample, "/calc.pkl")) %>%
mutate(Sample_ID = sample,
Diagnosis = subset(sample_data, Sample_ID == sample) %>% pull(Diagnosis))
View(sample_pkl_data)
sample_pkl_data <- extract_df_from_pkl(paste0(np_data_path, sample, "/calc.pkl")) %>%
mutate(Sample_ID = sample,
Diagnosis = subset(sample_data, Sample_ID == sample) %>% pull(Diagnosis),
brain_region_1 = as.numeric(gsub("proc-", "", brain_region_1)),
brain_region_2 = as.numeric(gsub("proc-", "", brain_region_2)))
np_rdata_path <- paste0(rdata_path, noise_label, "/")
icesTAF::mkdir(np_rdata_path)
paste0(np_rdata_path, sample, "_",
pairwise_feature_set, ".Rds")
saveRDS(sample_pkl_data, file=paste0(np_rdata_path, sample, "_",
pairwise_feature_set, ".Rds"))
brain_region_lookup <- paste0(data_path, brain_region_lookup)
rdata_path
paste0(rdata_path, dataset_ID,
"_", pairwise_feature_set, ".Rds")
sample_pkl_data <- extract_df_from_pkl(paste0(np_data_path, sample, "/calc.pkl")) %>%
mutate(Sample_ID = sample,
Diagnosis = subset(sample_data, Sample_ID == sample) %>% pull(Diagnosis),
Noise_Proc = noise_proc,
brain_region_1 = as.numeric(gsub("proc-", "", brain_region_1)),
brain_region_2 = as.numeric(gsub("proc-", "", brain_region_2)))
# Save results to an RDS file for this sample
saveRDS(sample_pkl_data, file=paste0(np_rdata_path, sample, "_",
pairwise_feature_set, ".Rds"))
paste0(rdata_path, noise_label, "/", subject, "_pyspi.Rds")
# Define data path for this noise processing method
np_data_path <- paste0(rdata_path, noise_label, "/")
# Iterate over each sample
samples = unique(list.dirs(np_rdata_path, recursive = F, full.names = F))
np_rdata_path
# Iterate over each sample
samples = unique(list.files(np_rdata_path, recursive = F, full.names = F))
np_rdata_path <- paste0(rdata_path, noise_label, "_", pairwise_feature_set, "/")
icesTAF::mkdir(np_rdata_path)
# Define data path for this noise processing method
np_rdata_path <- paste0(rdata_path, noise_label, "_", pairwise_feature_set, "/")
# Iterate over each sample
pyspi_files = unique(list.files(np_rdata_path, recursive = F, full.names = F))
file = pyspi_files[1]
sample = gsub(sprintf("_%s|.Rds", pairwise_feature_set), "", file)
# Create list to store results across noise-processing methods
noise_proc_res <- list()
noise_label = gsub("\\+", "_", noise_proc)
# Define data path for this noise processing method
np_rdata_path <- paste0(rdata_path, noise_label, "_", pairwise_feature_set, "/")
# Iterate over each sample
pyspi_files = unique(list.files(np_rdata_path, recursive = F, full.names = F))
for (file in pyspi_files) {
sample = gsub(sprintf("_%s|.Rds", pairwise_feature_set), "", file)
# If sample doesn't have a corresponding pyspi RDS file for this
# noise-processing method, create one
tryCatch({
sample_pyspi_res <- readRDS(paste0(np_rdata_path, file))
# Append results to list
noise_proc_res <- list.append(noise_proc_res, sample_pyspi_res)
},
error = function(e){
cat("\nError for sample", sample, "\n")
print(e)
})
}
do.call(plyr::rbind.fill, noise_proc_res)  %>%
mutate(comparison = row_number(),
group = stringr::str_to_sentence(group)) %>%
pivot_longer(cols = c(brain_region_1,
brain_region_2),
names_to = "Region_Number",
values_to = "Index")
do.call(plyr::rbind.fill, noise_proc_res)  %>%
mutate(comparison = row_number(),
group = stringr::str_to_sentence(Diagnosis)) %>%
pivot_longer(cols = c(brain_region_1,
brain_region_2),
names_to = "Region_Number",
values_to = "Index") %>%
# Convert Index to number and add 1 since python is base 0
# While R is base 1
mutate(Index = 1 + as.numeric(gsub("proc-", "", Index)))
# Read in ROI index data
ROI_index <- read.csv(brain_region_lookup)
do.call(plyr::rbind.fill, noise_proc_res)  %>%
mutate(comparison = row_number(),
group = stringr::str_to_sentence(Diagnosis)) %>%
pivot_longer(cols = c(brain_region_1,
brain_region_2),
names_to = "Region_Number",
values_to = "Index") %>%
# Convert Index to number and add 1 since python is base 0
# While R is base 1
mutate(Index = 1 + as.numeric(gsub("proc-", "", Index))) %>%
left_join(ROI_index) %>%
dplyr::select(-Index)
do.call(plyr::rbind.fill, noise_proc_res)  %>%
mutate(comparison = row_number(),
group = stringr::str_to_sentence(Diagnosis)) %>%
pivot_longer(cols = c(brain_region_1,
brain_region_2),
names_to = "Region_Number",
values_to = "Index") %>%
# Convert Index to number and add 1 since python is base 0
# While R is base 1
mutate(Index = 1 + as.numeric(gsub("proc-", "", Index))) %>%
left_join(ROI_index) %>%
dplyr::select(-Index) %>%
pivot_wider(id_cols = c("Sample_ID", "Diagnosis", "SPI", "value", "comparison"),
names_from = "Region_Number",
values_from = "ROI") %>%
dplyr::select(-comparison)
do.call(plyr::rbind.fill, noise_proc_res)  %>%
mutate(comparison = row_number(),
group = stringr::str_to_sentence(Diagnosis)) %>%
pivot_longer(cols = c(brain_region_1,
brain_region_2),
names_to = "Region_Number",
values_to = "Index") %>%
# Convert Index to number and add 1 since python is base 0
# While R is base 1
mutate(Index = 1 + as.numeric(gsub("proc-", "", Index))) %>%
left_join(ROI_index) %>%
dplyr::select(-Index)
do.call(plyr::rbind.fill, noise_proc_res)  %>%
mutate(comparison = row_number(),
group = stringr::str_to_sentence(Diagnosis)) %>%
pivot_longer(cols = c(brain_region_1,
brain_region_2),
names_to = "Region_Number",
values_to = "Index") %>%
# Convert Index to number and add 1 since python is base 0
# While R is base 1
mutate(Index = 1 + as.numeric(gsub("proc-", "", Index))) %>%
left_join(ROI_index) %>%
dplyr::select(-Index) %>%
pivot_wider(id_cols = c("Sample_ID", "Diagnosis", "SPI", "value", "comparison"),
names_from = "Region_Number",
values_from = "Brain_Region") %>%
dplyr::select(-comparison)
python_to_use <- "/headnode1/abry4213/.conda/envs/pyspi/bin/python3"
univariate_feature_set <- "catch22"
pairwise_feature_set <- "pyspi14"
sample_csv_file <- "participants.csv"
github_dir <- "/headnode1/abry4213/github/fMRI_FeaturesDisorders/"
data_path <- "/headnode1/abry4213/data/UCLA_Schizophrenia/"
dataset_ID <- "UCLA_Schizophrenia"
noise_procs <- c("AROMA+2P", "AROMA+2P+GMR", "AROMA+2P+DiCER")
brain_region_lookup <- "Brain_Region_info.csv"
data_path <- "/headnode1/abry4213/data/UCLA_Schizophrenia/"
dataset_ID <- "UCLA_Schizophrenia"
noise_procs <- c("AROMA+2P", "AROMA+2P+GMR", "AROMA+2P+DiCER")
brain_region_lookup <- "Brain_Region_info.csv"
pkl_data_path <- paste0(data_path, "raw_data/numpy_files/")
rdata_path <- paste0(data_path, "processed_data/Rdata/")
plot_dir <- paste0(data_path, "plots/")
icesTAF::mkdir(plot_dir)
read_pyspi_pkl_into_RDS <- function(pkl_data_path,
sample_csv_file,
noise_procs = c("AROMA+2P",
"AROMA+2P+GMR",
"AROMA+2P+DiCER")) {
# Load sample data
sample_data <- read.csv(sample_csv_file)
# Iterate over each noise-processing method
for (noise_proc in noise_procs) {
noise_label = gsub("\\+", "_", noise_proc)
# Define data path for this noise processing method
np_data_path <- paste0(pkl_data_path, noise_label, "/")
# Define output rdata path
np_rdata_path <- paste0(rdata_path, noise_label, "_", pairwise_feature_set, "/")
icesTAF::mkdir(np_rdata_path)
# Iterate over each sample
for (sample in unique(list.dirs(np_data_path, recursive = F, full.names = F))) {
# If sample doesn't have a corresponding pyspi RDS file for this
# noise-processing method, create one
if (!file.exists(paste0(np_data_path, sample, "_pyspi.Rds"))) {
cat("\nNow prepping data for", sample, noise_proc, "\n")
tryCatch({sample_pkl_data <- extract_df_from_pkl(paste0(np_data_path, sample, "/calc.pkl")) %>%
mutate(Sample_ID = sample,
Diagnosis = subset(sample_data, Sample_ID == sample) %>% pull(Diagnosis),
Noise_Proc = noise_proc,
brain_region_1 = as.numeric(gsub("proc-", "", brain_region_1)),
brain_region_2 = as.numeric(gsub("proc-", "", brain_region_2)))
# Save results to an RDS file for this sample
saveRDS(sample_pkl_data, file=paste0(np_rdata_path, sample, "_",
pairwise_feature_set, ".Rds"))},
error = function(e){
cat("\nError for sample", sample, "\n")
print(e)
})
}
}
}
}
#-------------------------------------------------------------------------------
# Function to merge all of the individual sample pyspi .Rds files into one
#-------------------------------------------------------------------------------
merge_pyspi_res_for_study <- function(rdata_path,
dataset_ID = "UCLA_Schizophrenia",
brain_region_lookup,
noise_procs = c("AROMA+2P",
"AROMA+2P+GMR",
"AROMA+2P+DiCER")) {
# Read in ROI index data
ROI_index <- read.csv(brain_region_lookup)
if (!file.exists(paste0(rdata_path, dataset_ID,
"_", pairwise_feature_set, ".Rds"))) {
# Create list to store results across noise-processing methods
noise_proc_res <- list()
# Iterate over each noise-processing method
for (noise_proc in noise_procs) {
noise_label = gsub("\\+", "_", noise_proc)
# Define data path for this noise processing method
np_rdata_path <- paste0(rdata_path, noise_label, "_", pairwise_feature_set, "/")
# Iterate over each sample
pyspi_files = unique(list.files(np_rdata_path, recursive = F, full.names = F))
for (file in pyspi_files) {
sample = gsub(sprintf("_%s|.Rds", pairwise_feature_set), "", file)
# If sample doesn't have a corresponding pyspi RDS file for this
# noise-processing method, create one
tryCatch({
sample_pyspi_res <- readRDS(paste0(np_rdata_path, file))
# Append results to list
noise_proc_res <- list.append(noise_proc_res, sample_pyspi_res)
},
error = function(e){
cat("\nError for sample", sample, "\n")
print(e)
})
}
# Merge subjects' data together
all_pyspi_data <- do.call(plyr::rbind.fill, noise_proc_res)  %>%
mutate(comparison = row_number(),
group = stringr::str_to_sentence(Diagnosis)) %>%
pivot_longer(cols = c(brain_region_1,
brain_region_2),
names_to = "Region_Number",
values_to = "Index") %>%
# Convert Index to number and add 1 since python is base 0
# While R is base 1
mutate(Index = 1 + as.numeric(gsub("proc-", "", Index))) %>%
left_join(ROI_index) %>%
dplyr::select(-Index) %>%
pivot_wider(id_cols = c("Sample_ID", "Diagnosis", "SPI", "value", "comparison"),
names_from = "Region_Number",
values_from = "Brain_Region") %>%
dplyr::select(-comparison)
saveRDS(all_pyspi_data, paste0(rdata_path, dataset_ID,
"_", pairwise_feature_set, ".Rds"))
}
}
}
read_pyspi_pkl_into_RDS(pkl_data_path = pkl_data_path,
sample_csv_file = paste0(data_path, sample_csv_file),
noise_procs = noise_procs)
for (noise_proc in noise_procs) {
noise_label = gsub("\\+", "_", noise_proc)
# Define data path for this noise processing method
np_rdata_path <- paste0(rdata_path, noise_label, "_", pairwise_feature_set, "/")
# Iterate over each sample
pyspi_files = unique(list.files(np_rdata_path, recursive = F, full.names = F))
for (file in pyspi_files) {
cat("Now processing", file, "\n")
sample = gsub(sprintf("_%s|.Rds", pairwise_feature_set), "", file)
# If sample doesn't have a corresponding pyspi RDS file for this
# noise-processing method, create one
tryCatch({
sample_pyspi_res <- readRDS(paste0(np_rdata_path, file))
# Append results to list
noise_proc_res <- list.append(noise_proc_res, sample_pyspi_res)
},
error = function(e){
cat("\nError for sample", sample, "\n")
print(e)
})
}
}
all_pyspi_data <- do.call(plyr::rbind.fill, noise_proc_res)  %>%
mutate(comparison = row_number(),
group = stringr::str_to_sentence(Diagnosis)) %>%
pivot_longer(cols = c(brain_region_1,
brain_region_2),
names_to = "Region_Number",
values_to = "Index") %>%
# Convert Index to number and add 1 since python is base 0
# While R is base 1
mutate(Index = 1 + as.numeric(gsub("proc-", "", Index))) %>%
left_join(ROI_index) %>%
dplyr::select(-Index) %>%
pivot_wider(id_cols = c("Sample_ID", "Diagnosis", "SPI", "value", "comparison"),
names_from = "Region_Number",
values_from = "Brain_Region") %>%
dplyr::select(-comparison)
saveRDS(all_pyspi_data, paste0(rdata_path, dataset_ID,
"_", pairwise_feature_set, ".Rds"))
setwd("~/github/fMRI_FeaturesDisorders/data_prep_and_QC")
noise_procs = c("", "FC1000")
noise_procs[noise_procs!=""]
python_to_use <- "/headnode1/abry4213/.conda/envs/pyspi/bin/python3"
univariate_feature_set <- "catch22"
pairwise_feature_set <- "pyspi14"
sample_csv_file <- "participants.csv"
github_dir <- "/headnode1/abry4213/github/fMRI_FeaturesDisorders/"
data_path <- "/headnode1/abry4213/data/ABIDE_ASD/"
dataset_ID <- "ABIDE_ASD"
noise_procs <- c("FC1000")
brain_region_lookup <- "Harvard_Oxford_cort_prob_2mm_ROI_lookup.csv"
reticulate::use_python(python_to_use)
library(reticulate)
reticulate::source_python(paste0(github_dir, "helper_functions/data_prep_and_QC/pickle_reader.py"))
library(tidyverse)
cat("pkl_data_path:", pkl_data_path, "\n")
pkl_data_path <- paste0(data_path, "raw_data/numpy_files/")
rdata_path <- paste0(data_path, "processed_data/Rdata/")
plot_dir <- paste0(data_path, "plots/")
icesTAF::mkdir(plot_dir)
cat("pkl_data_path:", pkl_data_path, "\n")
cat("rdata_path:", rdata_path, "\n")
cat("sample_csv_file:", paste0(data_path, sample_csv_file), "\n")
cat("noise_procs:", paste(noise_procs, collapse=", "), "\n")
pkl_data_path = pkl_data_path
sample_csv_file = paste0(data_path, sample_csv_file)
# Load sample data
sample_data <- read.csv(sample_csv_file)
noise_proc="FC1000"
# Define data path for this noise processing method
np_data_path <- paste0(pkl_data_path, noise_label, "/")
noise_label = gsub("\\+", "_", noise_proc)
# Define data path for this noise processing method
np_data_path <- paste0(pkl_data_path, noise_label, "/")
np_rdata_path <- paste0(rdata_path, noise_label, "_", pairwise_feature_set, "/")
icesTAF::mkdir(np_rdata_path)
np_data_path
