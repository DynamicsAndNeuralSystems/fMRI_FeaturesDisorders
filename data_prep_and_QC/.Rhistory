do.call(plyr::rbind.fill, noise_proc_res)  %>%
mutate(comparison = row_number(),
group = stringr::str_to_sentence(group)) %>%
pivot_longer(cols = c(brain_region_1,
brain_region_2),
names_to = "Region_Number",
values_to = "Index")
do.call(plyr::rbind.fill, noise_proc_res)  %>%
mutate(comparison = row_number(),
group = stringr::str_to_sentence(Diagnosis)) %>%
pivot_longer(cols = c(brain_region_1,
brain_region_2),
names_to = "Region_Number",
values_to = "Index") %>%
# Convert Index to number and add 1 since python is base 0
# While R is base 1
mutate(Index = 1 + as.numeric(gsub("proc-", "", Index)))
# Read in ROI index data
ROI_index <- read.csv(brain_region_lookup)
do.call(plyr::rbind.fill, noise_proc_res)  %>%
mutate(comparison = row_number(),
group = stringr::str_to_sentence(Diagnosis)) %>%
pivot_longer(cols = c(brain_region_1,
brain_region_2),
names_to = "Region_Number",
values_to = "Index") %>%
# Convert Index to number and add 1 since python is base 0
# While R is base 1
mutate(Index = 1 + as.numeric(gsub("proc-", "", Index))) %>%
left_join(ROI_index) %>%
dplyr::select(-Index)
do.call(plyr::rbind.fill, noise_proc_res)  %>%
mutate(comparison = row_number(),
group = stringr::str_to_sentence(Diagnosis)) %>%
pivot_longer(cols = c(brain_region_1,
brain_region_2),
names_to = "Region_Number",
values_to = "Index") %>%
# Convert Index to number and add 1 since python is base 0
# While R is base 1
mutate(Index = 1 + as.numeric(gsub("proc-", "", Index))) %>%
left_join(ROI_index) %>%
dplyr::select(-Index) %>%
pivot_wider(id_cols = c("Sample_ID", "Diagnosis", "SPI", "value", "comparison"),
names_from = "Region_Number",
values_from = "ROI") %>%
dplyr::select(-comparison)
do.call(plyr::rbind.fill, noise_proc_res)  %>%
mutate(comparison = row_number(),
group = stringr::str_to_sentence(Diagnosis)) %>%
pivot_longer(cols = c(brain_region_1,
brain_region_2),
names_to = "Region_Number",
values_to = "Index") %>%
# Convert Index to number and add 1 since python is base 0
# While R is base 1
mutate(Index = 1 + as.numeric(gsub("proc-", "", Index))) %>%
left_join(ROI_index) %>%
dplyr::select(-Index)
do.call(plyr::rbind.fill, noise_proc_res)  %>%
mutate(comparison = row_number(),
group = stringr::str_to_sentence(Diagnosis)) %>%
pivot_longer(cols = c(brain_region_1,
brain_region_2),
names_to = "Region_Number",
values_to = "Index") %>%
# Convert Index to number and add 1 since python is base 0
# While R is base 1
mutate(Index = 1 + as.numeric(gsub("proc-", "", Index))) %>%
left_join(ROI_index) %>%
dplyr::select(-Index) %>%
pivot_wider(id_cols = c("Sample_ID", "Diagnosis", "SPI", "value", "comparison"),
names_from = "Region_Number",
values_from = "Brain_Region") %>%
dplyr::select(-comparison)
python_to_use <- "/headnode1/abry4213/.conda/envs/pyspi/bin/python3"
univariate_feature_set <- "catch22"
pairwise_feature_set <- "pyspi14"
sample_csv_file <- "participants.csv"
github_dir <- "/headnode1/abry4213/github/fMRI_FeaturesDisorders/"
data_path <- "/headnode1/abry4213/data/UCLA_Schizophrenia/"
dataset_ID <- "UCLA_Schizophrenia"
noise_procs <- c("AROMA+2P", "AROMA+2P+GMR", "AROMA+2P+DiCER")
brain_region_lookup <- "Brain_Region_info.csv"
data_path <- "/headnode1/abry4213/data/UCLA_Schizophrenia/"
dataset_ID <- "UCLA_Schizophrenia"
noise_procs <- c("AROMA+2P", "AROMA+2P+GMR", "AROMA+2P+DiCER")
brain_region_lookup <- "Brain_Region_info.csv"
pkl_data_path <- paste0(data_path, "raw_data/numpy_files/")
rdata_path <- paste0(data_path, "processed_data/Rdata/")
plot_dir <- paste0(data_path, "plots/")
icesTAF::mkdir(plot_dir)
read_pyspi_pkl_into_RDS <- function(pkl_data_path,
sample_csv_file,
noise_procs = c("AROMA+2P",
"AROMA+2P+GMR",
"AROMA+2P+DiCER")) {
# Load sample data
sample_data <- read.csv(sample_csv_file)
# Iterate over each noise-processing method
for (noise_proc in noise_procs) {
noise_label = gsub("\\+", "_", noise_proc)
# Define data path for this noise processing method
np_data_path <- paste0(pkl_data_path, noise_label, "/")
# Define output rdata path
np_rdata_path <- paste0(rdata_path, noise_label, "_", pairwise_feature_set, "/")
icesTAF::mkdir(np_rdata_path)
# Iterate over each sample
for (sample in unique(list.dirs(np_data_path, recursive = F, full.names = F))) {
# If sample doesn't have a corresponding pyspi RDS file for this
# noise-processing method, create one
if (!file.exists(paste0(np_data_path, sample, "_pyspi.Rds"))) {
cat("\nNow prepping data for", sample, noise_proc, "\n")
tryCatch({sample_pkl_data <- extract_df_from_pkl(paste0(np_data_path, sample, "/calc.pkl")) %>%
mutate(Sample_ID = sample,
Diagnosis = subset(sample_data, Sample_ID == sample) %>% pull(Diagnosis),
Noise_Proc = noise_proc,
brain_region_1 = as.numeric(gsub("proc-", "", brain_region_1)),
brain_region_2 = as.numeric(gsub("proc-", "", brain_region_2)))
# Save results to an RDS file for this sample
saveRDS(sample_pkl_data, file=paste0(np_rdata_path, sample, "_",
pairwise_feature_set, ".Rds"))},
error = function(e){
cat("\nError for sample", sample, "\n")
print(e)
})
}
}
}
}
#-------------------------------------------------------------------------------
# Function to merge all of the individual sample pyspi .Rds files into one
#-------------------------------------------------------------------------------
merge_pyspi_res_for_study <- function(rdata_path,
dataset_ID = "UCLA_Schizophrenia",
brain_region_lookup,
noise_procs = c("AROMA+2P",
"AROMA+2P+GMR",
"AROMA+2P+DiCER")) {
# Read in ROI index data
ROI_index <- read.csv(brain_region_lookup)
if (!file.exists(paste0(rdata_path, dataset_ID,
"_", pairwise_feature_set, ".Rds"))) {
# Create list to store results across noise-processing methods
noise_proc_res <- list()
# Iterate over each noise-processing method
for (noise_proc in noise_procs) {
noise_label = gsub("\\+", "_", noise_proc)
# Define data path for this noise processing method
np_rdata_path <- paste0(rdata_path, noise_label, "_", pairwise_feature_set, "/")
# Iterate over each sample
pyspi_files = unique(list.files(np_rdata_path, recursive = F, full.names = F))
for (file in pyspi_files) {
sample = gsub(sprintf("_%s|.Rds", pairwise_feature_set), "", file)
# If sample doesn't have a corresponding pyspi RDS file for this
# noise-processing method, create one
tryCatch({
sample_pyspi_res <- readRDS(paste0(np_rdata_path, file))
# Append results to list
noise_proc_res <- list.append(noise_proc_res, sample_pyspi_res)
},
error = function(e){
cat("\nError for sample", sample, "\n")
print(e)
})
}
# Merge subjects' data together
all_pyspi_data <- do.call(plyr::rbind.fill, noise_proc_res)  %>%
mutate(comparison = row_number(),
group = stringr::str_to_sentence(Diagnosis)) %>%
pivot_longer(cols = c(brain_region_1,
brain_region_2),
names_to = "Region_Number",
values_to = "Index") %>%
# Convert Index to number and add 1 since python is base 0
# While R is base 1
mutate(Index = 1 + as.numeric(gsub("proc-", "", Index))) %>%
left_join(ROI_index) %>%
dplyr::select(-Index) %>%
pivot_wider(id_cols = c("Sample_ID", "Diagnosis", "SPI", "value", "comparison"),
names_from = "Region_Number",
values_from = "Brain_Region") %>%
dplyr::select(-comparison)
saveRDS(all_pyspi_data, paste0(rdata_path, dataset_ID,
"_", pairwise_feature_set, ".Rds"))
}
}
}
read_pyspi_pkl_into_RDS(pkl_data_path = pkl_data_path,
sample_csv_file = paste0(data_path, sample_csv_file),
noise_procs = noise_procs)
for (noise_proc in noise_procs) {
noise_label = gsub("\\+", "_", noise_proc)
# Define data path for this noise processing method
np_rdata_path <- paste0(rdata_path, noise_label, "_", pairwise_feature_set, "/")
# Iterate over each sample
pyspi_files = unique(list.files(np_rdata_path, recursive = F, full.names = F))
for (file in pyspi_files) {
cat("Now processing", file, "\n")
sample = gsub(sprintf("_%s|.Rds", pairwise_feature_set), "", file)
# If sample doesn't have a corresponding pyspi RDS file for this
# noise-processing method, create one
tryCatch({
sample_pyspi_res <- readRDS(paste0(np_rdata_path, file))
# Append results to list
noise_proc_res <- list.append(noise_proc_res, sample_pyspi_res)
},
error = function(e){
cat("\nError for sample", sample, "\n")
print(e)
})
}
}
all_pyspi_data <- do.call(plyr::rbind.fill, noise_proc_res)  %>%
mutate(comparison = row_number(),
group = stringr::str_to_sentence(Diagnosis)) %>%
pivot_longer(cols = c(brain_region_1,
brain_region_2),
names_to = "Region_Number",
values_to = "Index") %>%
# Convert Index to number and add 1 since python is base 0
# While R is base 1
mutate(Index = 1 + as.numeric(gsub("proc-", "", Index))) %>%
left_join(ROI_index) %>%
dplyr::select(-Index) %>%
pivot_wider(id_cols = c("Sample_ID", "Diagnosis", "SPI", "value", "comparison"),
names_from = "Region_Number",
values_from = "Brain_Region") %>%
dplyr::select(-comparison)
saveRDS(all_pyspi_data, paste0(rdata_path, dataset_ID,
"_", pairwise_feature_set, ".Rds"))
setwd("~/github/fMRI_FeaturesDisorders/data_prep_and_QC")
noise_procs = c("", "FC1000")
noise_procs[noise_procs!=""]
python_to_use <- "/headnode1/abry4213/.conda/envs/pyspi/bin/python3"
univariate_feature_set <- "catch22"
pairwise_feature_set <- "pyspi14"
sample_csv_file <- "participants.csv"
github_dir <- "/headnode1/abry4213/github/fMRI_FeaturesDisorders/"
data_path <- "/headnode1/abry4213/data/ABIDE_ASD/"
dataset_ID <- "ABIDE_ASD"
noise_procs <- c("FC1000")
brain_region_lookup <- "Harvard_Oxford_cort_prob_2mm_ROI_lookup.csv"
reticulate::use_python(python_to_use)
library(reticulate)
reticulate::source_python(paste0(github_dir, "helper_functions/data_prep_and_QC/pickle_reader.py"))
library(tidyverse)
cat("pkl_data_path:", pkl_data_path, "\n")
pkl_data_path <- paste0(data_path, "raw_data/numpy_files/")
rdata_path <- paste0(data_path, "processed_data/Rdata/")
plot_dir <- paste0(data_path, "plots/")
icesTAF::mkdir(plot_dir)
cat("pkl_data_path:", pkl_data_path, "\n")
cat("rdata_path:", rdata_path, "\n")
cat("sample_csv_file:", paste0(data_path, sample_csv_file), "\n")
cat("noise_procs:", paste(noise_procs, collapse=", "), "\n")
pkl_data_path = pkl_data_path
sample_csv_file = paste0(data_path, sample_csv_file)
# Load sample data
sample_data <- read.csv(sample_csv_file)
noise_proc="FC1000"
# Define data path for this noise processing method
np_data_path <- paste0(pkl_data_path, noise_label, "/")
noise_label = gsub("\\+", "_", noise_proc)
# Define data path for this noise processing method
np_data_path <- paste0(pkl_data_path, noise_label, "/")
np_rdata_path <- paste0(rdata_path, noise_label, "_", pairwise_feature_set, "/")
icesTAF::mkdir(np_rdata_path)
np_data_path
python_to_use <- "/headnode1/abry4213/.conda/envs/pyspi/bin/python3"
univariate_feature_set <- "catch22"
pairwise_feature_set <- "pyspi14"
sample_csv_file <- "participants.csv"
github_dir <- "/headnode1/abry4213/github/fMRI_FeaturesDisorders/"
# UCLA schizophrenia
# data_path <- "/headnode1/abry4213/data/UCLA_Schizophrenia/"
sample_metadata_file <- "UCLA_Schizophrenia_sample_metadata.Rds"
data_path <- "/headnode1/abry4213/data/ABIDE_ASD/"
sample_metadata_file <- "ABIDE_ASD_sample_metadata.Rds"
dataset_ID <- "ABIDE_ASD"
noise_procs <- c("FC1000")
brain_region_lookup <- "Harvard_Oxford_cort_prob_2mm_ROI_lookup.csv"
sample_metadata <- readRDS(paste0(data_path, sample_metadata_file))
pkl_data_path <- paste0(data_path, "raw_data/numpy_files/")
rdata_path <- paste0(data_path, "processed_data/Rdata/")
plot_dir <- paste0(data_path, "plots/")
icesTAF::mkdir(plot_dir)
# Load specified python version
reticulate::use_python(python_to_use)
library(reticulate)
reticulate::source_python(paste0(github_dir, "helper_functions/data_prep_and_QC/pickle_reader.py"))
library(tidyverse)
# Print out arguments
cat("pkl_data_path:", pkl_data_path, "\n")
cat("rdata_path:", rdata_path, "\n")
cat("sample_csv_file:", paste0(data_path, sample_csv_file), "\n")
cat("noise_procs:", paste(noise_procs, collapse=", "), "\n")
noise_label = gsub("\\+", "_", noise_proc)
noise_proc = "FC1000"
noise_label = gsub("\\+", "_", noise_proc)
cat("\nNow processing", noise_label, "\n")
# Define data path for this noise processing method
np_data_path <- paste0(pkl_data_path, noise_label, "/")
# Define output rdata path
np_rdata_path <- paste0(rdata_path, noise_label, "_", pairwise_feature_set, "/")
icesTAF::mkdir(np_rdata_path)
unique(list.dirs(np_data_path, recursive = F, full.names = F))
sample="7874498584216048106"
extract_df_from_pkl(paste0(np_data_path, sample, "/calc.pkl"))
extract_df_from_pkl(paste0(np_data_path, sample, "/calc.pkl")) %>%
mutate(Sample_ID = sample,
Diagnosis = subset(sample_metadata, Sample_ID == sample) %>% pull(Diagnosis),
Noise_Proc = noise_proc,
brain_region_1 = as.numeric(gsub("proc-", "", brain_region_1)),
brain_region_2 = as.numeric(gsub("proc-", "", brain_region_2)))
sample_pkl_data <- extract_df_from_pkl(paste0(np_data_path, sample, "/calc.pkl")) %>%
mutate(Sample_ID = sample,
Diagnosis = subset(sample_metadata, Sample_ID == sample) %>% pull(Diagnosis),
Noise_Proc = noise_proc,
brain_region_1 = as.numeric(gsub("proc-", "", brain_region_1)),
brain_region_2 = as.numeric(gsub("proc-", "", brain_region_2)))
# Save results to an RDS file for this sample
saveRDS(sample_pkl_data, file=paste0(np_rdata_path, sample, "_pyspi.Rds"))
dataset_ID="UCLA_Schizophrenia"
data_path="/headnode1/abry4213/data/UCLA_Schizophrenia"
univariate_feature_set="catch22"
pairwise_feature_set="pyspi14"
library(tidyverse)
rdata_path <- paste0(data_path, "Rdata/")
setwd("~/github/fMRI_FeaturesDisorders/data_prep_and_QC")
dataset_ID = "UCLA_Schizophrenia"
noise_proc = "AROMA+2P+GMR"
pairwise_feature_set = "pyspi14"
proc_data_path <- paste0(data_path, "processed_data/Rdata/")
TS_feature_data <- readRDS(paste0(proc_rdata_path, sprintf("%s_%s.Rds",
dataset_ID,
pairwise_feature_set))) %>%
filter(Noise_Proc == noise_proc)
proc_rdata_path = proc_data_path
TS_feature_data <- readRDS(paste0(proc_rdata_path, sprintf("%s_%s.Rds",
dataset_ID,
pairwise_feature_set))) %>%
filter(Noise_Proc == noise_proc)
proc_rdata_path = "/headnode1/abry4213/data/UCLA_Schizophrenia/processed_data/Rdata/"
TS_feature_data <- readRDS(paste0(proc_rdata_path, sprintf("%s_%s.Rds",
dataset_ID,
pairwise_feature_set))) %>%
filter(Noise_Proc == noise_proc)
# Load in pairwise data for this noise processing method
TS_feature_data <- readRDS(paste0(proc_rdata_path, sprintf("%s_%s.Rds",
dataset_ID,
pairwise_feature_set)))
library(tidyverse)
dataset_ID = "UCLA_Schizophrenia"
noise_proc = "AROMA+2P+GMR"
pairwise_feature_set = "pyspi14"
proc_rdata_path <- "/headnode1/abry4213/data/UCLA_Schizophrenia/processed_data/Rdata/"
# Noise label name
noise_label = gsub("\\+", "_", noise_proc)
TS_feature_data <- readRDS(paste0(proc_rdata_path, sprintf("%s_%s.Rds",
dataset_ID,
pairwise_feature_set)))
TS_feature_data <- subset(TS_feature_data, Noise_Proc=="AROMA+2P+GMR")
NA_sample_data <- TS_feature_data %>%
group_by(Sample_ID, Noise_Proc, SPI) %>%
filter(all(is.na(value))) %>%
ungroup() %>%
distinct(Sample_ID, Noise_Proc, SPI) %>%
group_by(Sample_ID, Noise_Proc) %>%
dplyr::summarise(num_na = n()) %>%
# Only want to see subjects with NA for more than one feature
filter(num_na > 1) %>%
tidyr::pivot_wider(id_cols=Sample_ID, names_from=Noise_Proc, values_from=num_na) %>%
mutate_all(~replace(., is.na(.), 0))
NA_feature_data <- TS_feature_data %>%
group_by(SPI, Noise_Proc) %>%
filter(all(is.na(value))) %>%
distinct(SPI, Noise_Proc)
TS_feature_data_filtered = TS_feature_data
TS_feature_data_z <- normalise_feature_frame(TS_feature_data_filtered,
names_var = "SPI",
values_var = "value",
method = "z-score")
library(theft)
TS_feature_data_z <- normalise_feature_frame(TS_feature_data_filtered,
names_var = "SPI",
values_var = "value",
method = "z-score")
TS_feature_data_filtered <- subset(TS_feature_data_filtered, Noise_Proc == noise_proc) %>%
dplyr::rename("names"="SPI", "values"="value")
TS_feature_data_z <- normalise_feature_frame(TS_feature_data_filtered,
names_var = "SPI",
values_var = "value",
method = "z-score")
TS_feature_data_z <- normalise_feature_frame(TS_feature_data_filtered,
names_var = "names",
values_var = "values",
method = "z-score")
saveRDS(TS_feature_df_z, file = paste0(processed_rdata_path, sprintf("%s_%s_filtered_zscored.Rds",
dataset_ID,
pairwise_feature_set)))
saveRDS(TS_feature_df_z, file = paste0(proc_rdata_path, sprintf("%s_%s_filtered_zscored.Rds",
dataset_ID,
pairwise_feature_set)))
saveRDS(TS_feature_data_z, file = paste0(proc_rdata_path, sprintf("%s_%s_filtered_zscored.Rds",
dataset_ID,
pairwise_feature_set)))
sample_IDs_to_drop = c()
sample_IDs_to_drop = c()
TS_feature_data_filtered <- TS_feature_data %>%
dplyr::filter(!(Sample_ID %in% sample_IDs_to_drop))
paste0(proc_rdata_path, dataset_ID, "_",
pairwise_feature_set, ".Rds")
pairwise_NA_samples <- find_pairwise_sample_na(TS_feature_data,
dataset_ID = dataset_ID,
pairwise_feature_set = pairwise_feature_set,
noise_proc = noise_proc) %>%
pull(Sample_ID)
source("~/github/fMRI_FeaturesDisorders/helper_functions/data_prep_and_QC/QC_functions_pairwise.R")
pairwise_NA_samples <- find_pairwise_sample_na(TS_feature_data,
dataset_ID = dataset_ID,
pairwise_feature_set = pairwise_feature_set,
noise_proc = noise_proc) %>%
pull(Sample_ID)
View(remove_samples_from_feature_matrix)
source("~/github/fMRI_FeaturesDisorders/helper_functions/data_prep_and_QC/QC_functions_pairwise.R")
view(find_pairwise_feature_na)
pairwise_NA_features <- find_pairwise_feature_na(TS_feature_data,
dataset_ID = dataset_ID,
pairwise_feature_set = pairwise_feature_set,
noise_proc = noise_proc) %>%
pull(SPI)
pairwise_NA_features <- find_pairwise_feature_na(TS_feature_data,
dataset_ID = dataset_ID,
noise_proc = noise_proc) %>%
pull(SPI)
filtered_sample_info <- TS_feature_data_filtered %>%
distinct(Sample_ID)
sample_metadata_file = "UCLA_Schizophrenia_sample_metadata.Rds"
sample_metadata <- readRDS(paste0(data_path, sample_metadata_file))
data_path = "/headnode1/abry4213/data/UCLA_Schizophrenia/"
# Load metadata
sample_metadata <- readRDS(paste0(data_path, sample_metadata_file))
if (dataset_ID == "UCLA_Schizophrenia") {
sample_metadata <- sample_metadata %>%
filter(Diagnosis %in% c("Control", "Schizophrenia"))
}
TS_feature_data_filtered <- TS_feature_data_filtered %>%
dplyr::filter(Sample_ID %in% sample_metadata$Sample_ID)
saveRDS(TS_feature_data_filtered, file=paste0(proc_rdata_path,
sprintf("%s_%s_filtered.Rds",
dataset_ID,
pairwise_feature_set)))
filtered_sample_info <- TS_feature_data_filtered %>%
distinct(Sample_ID)
saveRDS(filtered_sample_info, file=paste0(proc_rdata_path,
sprintf("%s_filtered_sample_info_%s.Rds",
dataset_ID,
pairwise_feature_set)))
cat("Sample info saved to:", paste0(proc_rdata_path,
sprintf("%s_filtered_sample_info_%s.Rds",
dataset_ID,
univariate_feature_set)), "\n")
cat("Sample info saved to:", paste0(proc_rdata_path,
sprintf("%s_filtered_sample_info_%s.Rds",
dataset_ID,
pairwise_feature_set)), "\n")
z_score_pairwise_feature_matrix <- function(TS_feature_data_filtered,
proc_rdata_path,
dataset_ID,
pairwise_feature_set,
noise_proc) {
TS_feature_data_filtered <- subset(TS_feature_data_filtered,
Noise_Proc == noise_proc) %>%
dplyr::rename("names"="SPI", "values"="value")
TS_feature_data_z <- normalise_feature_frame(TS_feature_data_filtered,
names_var = "names",
values_var = "values",
method = "z-score")
saveRDS(TS_feature_data_z, file = paste0(proc_rdata_path, sprintf("%s_%s_filtered_zscored.Rds",
dataset_ID,
pairwise_feature_set)))
cat("\nZ-scored data saved to:", paste0(proc_rdata_path, sprintf("%s_%s_filtered_zscored.Rds",
dataset_ID,
pairwise_feature_set)),
"\n")
}
# Data normalisation: z-score the feature matrix as well.
z_score_pairwise_feature_matrix(TS_feature_data_filtered = TS_feature_data_filtered,
proc_rdata_path = proc_rdata_path,
dataset_ID = dataset_ID,
pairwise_feature_set = pairwise_feature_set,
noise_procs = noise_procs)
z_score_pairwise_feature_matrix(TS_feature_data_filtered = TS_feature_data_filtered,
proc_rdata_path = proc_rdata_path,
dataset_ID = dataset_ID,
pairwise_feature_set = pairwise_feature_set,
noise_proc = noise_proc)
rdata_path <- paste0(data_path, "processed_data/Rdata/")
univariate_samples <- readRDS(paste0(rdata_path,
dataset_ID,
"_filtered_sample_info_",
univariate_feature_set,
".Rds")) %>%
dplyr::select(Sample_ID, Diagnosis)
univariate_feature_set="catch22"
univariate_samples <- readRDS(paste0(rdata_path,
dataset_ID,
"_filtered_sample_info_",
univariate_feature_set,
".Rds")) %>%
dplyr::select(Sample_ID, Diagnosis)
