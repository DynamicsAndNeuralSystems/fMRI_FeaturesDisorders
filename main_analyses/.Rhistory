"Pairwise SPI + Univariate Combo-wise")))
View(ABIDE_merged_data)
ABIDE_merged_data %>%
ggplot(data=., mapping = aes(x = Analysis, y = balanced_accuracy)) +
geom_violin(aes(fill = Analysis), color="white") +
stat_summary(data = subset(ABIDE_merged_data, Analysis == "Univariate Combo-wise"),
geom = "crossbar", fun = "mean", aes(color=Analysis), size=1,
color = "#9B51B4") +
geom_boxplot(fill=NA, width=0.1, color="white") +
scale_x_discrete(labels = function(x) str_wrap(x, width = 15)) +
geom_line(data = subset(ABIDE_merged_data, Variable_Type=="Pairwise"),
aes(x=Analysis, y=balanced_accuracy, group=grouping_var),
color="white", alpha=0.5) +
scale_fill_manual(values = c("#F0224B", "chartreuse3", "darkgoldenrod2")) +
ylab("Balanced Accuracy") +
theme(legend.position = "none",
strip.placement = "outside",
strip.background = element_blank(),
strip.text.y.left = element_blank(),
axis.title.x = element_blank()) +
theme(axis.line = element_line(color="white"),
axis.text = element_text(color="white"),
strip.text = element_text(color="white"),
axis.title = element_text(color="white"),
axis.ticks = element_line(color="white"))
ggsave(paste0(plot_dir, "ABIDE_Final_Comparison_Violin.png"),
width = 7, height = 3, units = "in", dpi = 300)
library(tidyverse)
library(icesTAF)
library(ggseg)
library(tidyverse)
library(plotly)
library(ggseg3d)
library(ggsegHO)
library(reshape2)
library(patchwork)
library(cowplot)
theme_set(theme_cowplot())
github_dir <- "~/github/fMRI_FeaturesDisorders/"
plot_path <- paste0(github_dir, "plots/Data_Prep_QC/")
icesTAF::mkdir(plot_path)
UCLA_data_path <- "~/data/UCLA_Schizophrenia/"
UCLA_rdata_path <- paste0(UCLA_data_path, "processed_data/Rdata/")
ABIDE_data_path <- "~/data/ABIDE_ASD/"
ABIDE_rdata_path <- paste0(ABIDE_data_path, "processed_data/Rdata/")
ABIDE_brain_region_info <- read.csv(paste0(ABIDE_data_path,
"Harvard_Oxford_cort_prob_2mm_ROI_lookup.csv"))
source(paste0(github_dir, "helper_functions/data_prep_and_QC/QC_functions_univariate.R"))
source(paste0(github_dir, "helper_functions/Visualization.R"))
plot_path <- "~/OneDrive - The University of Sydney (Students)/Conferences/Complex_Systems_Emerging_Aspirations/Talk_Figures/"
#B179C4
set.seed(127)
# Load UCLA p-values
UCLA_SPI_pvals <- readRDS(paste0(UCLA_rdata_path, "SPI_wise_CV_linear_SVM_model_permutation_null_pyspi14_inv_prob_pvals.Rds")) %>%
filter(Noise_Proc == "AROMA+2P+GMR") %>%
ungroup() %>%
mutate(bal_acc_p_adj_bonf = p.adjust(bal_acc_p, method="bonferroni")) %>%
dplyr::select(grouping_var, bal_acc_p, bal_acc_p_adj, bal_acc_p_adj_bonf)
# Load UCLA main data
UCLA_SPI_main <- readRDS(paste0(UCLA_rdata_path, "SPI_wise_CV_linear_SVM_pyspi14_inv_prob_balacc.Rds")) %>%
filter(Noise_Proc == "AROMA+2P+GMR") %>%
group_by(grouping_var, repeat_number) %>%
summarise(mean_balacc = mean(balanced_accuracy, na.rm=T)) %>%
dplyr::rename("balanced_accuracy" = "mean_balacc") %>%
left_join(., UCLA_SPI_pvals) %>%
ungroup() %>%
mutate(grouping_var = str_replace_all(grouping_var, "_", " ")) %>%
mutate(grouping_var = fct_reorder(grouping_var,
balanced_accuracy,
.fun = mean))
# Load UCLA null data
UCLA_SPI_null <- readRDS(paste0(UCLA_rdata_path, "UCLA_Schizophrenia_SPI_wise_model_permutation_null_pyspi14_inv_prob.Rds"))
# UCLA boxplot with shaded null region
UCLA_null_mean <- mean(UCLA_SPI_null$balanced_accuracy)
UCLA_null_SD <- sd(UCLA_SPI_null$balanced_accuracy)
# UCLA boxplot with shaded null region
UCLA_null_mean <- mean(UCLA_SPI_null$balanced_accuracy)
UCLA_null_SD <- sd(UCLA_SPI_null$balanced_accuracy)
ggplot() +
geom_boxplot(data = UCLA_SPI_main %>% filter(bal_acc_p_adj < 0.05),
aes(y=grouping_var, x=balanced_accuracy),
fill = "chartreuse3", color="white") +
geom_rect(data = UCLA_SPI_main,
xmin = UCLA_null_mean - UCLA_null_SD,
xmax = UCLA_null_mean + UCLA_null_SD,
ymin=0, ymax=Inf, fill="gray85") +
geom_vline(xintercept = UCLA_null_mean) +
scale_x_continuous(limits = c(0.98*(UCLA_null_mean - UCLA_null_SD),
1.05*max(UCLA_SPI_main %>%
filter(bal_acc_p_adj < 0.05) %>%
pull(balanced_accuracy)))) +
xlab("Balanced Accuracy") +
ylab("Pairwise SPI") +
scale_y_discrete(labels = function(x) str_wrap(x, width = 35)) +
theme(axis.line = element_line(color="white"),
axis.text = element_text(color="white"),
axis.title = element_text(color="white"),
axis.ticks = element_line(color="white"))
ggsave(paste0(plot_path, "UCLA_Schizophrenia_SPI_sig_boxplot.png"),
width = 7, height = 2.5, units="in", dpi=300)
ABIDE_SPI_pvals <- readRDS(paste0(ABIDE_rdata_path, "SPI_wise_CV_linear_SVM_model_permutation_null_pyspi14_inv_prob_pvals.Rds")) %>%
filter(Noise_Proc == "FC1000") %>%
ungroup() %>%
mutate(bal_acc_p_adj_bonf = p.adjust(bal_acc_p, method="bonferroni")) %>%
dplyr::select(grouping_var, bal_acc_p, bal_acc_p_adj, bal_acc_p_adj_bonf)
# Load ABIDE main data
ABIDE_SPI_main <- readRDS(paste0(ABIDE_rdata_path, "SPI_wise_CV_linear_SVM_pyspi14_inv_prob_balacc.Rds")) %>%
filter(Noise_Proc == "FC1000") %>%
group_by(grouping_var, repeat_number) %>%
summarise(mean_balacc = mean(balanced_accuracy, na.rm=T)) %>%
dplyr::rename("balanced_accuracy" = "mean_balacc") %>%
left_join(., ABIDE_SPI_pvals) %>%
ungroup() %>%
mutate(grouping_var = str_replace_all(grouping_var, "_", " ")) %>%
mutate(grouping_var = fct_reorder(grouping_var,
balanced_accuracy,
.fun = mean))
ABIDE_SPI_null <- readRDS(paste0(ABIDE_rdata_path, "ABIDE_ASD_SPI_wise_model_permutation_null_pyspi14_inv_prob.Rds"))
# ABIDE boxplot with shaded null region
ABIDE_null_mean <- mean(ABIDE_SPI_null$balanced_accuracy)
ABIDE_null_SD <- sd(ABIDE_SPI_null$balanced_accuracy)
ggplot() +
geom_boxplot(data = ABIDE_SPI_main %>% filter(bal_acc_p_adj < 0.05),
aes(y=grouping_var, x=balanced_accuracy),
fill = "chartreuse3", color="white") +
geom_rect(data = ABIDE_SPI_main,
xmin = ABIDE_null_mean - ABIDE_null_SD,
xmax = ABIDE_null_mean + ABIDE_null_SD,
ymin=0, ymax=Inf, fill="gray85") +
geom_vline(xintercept = ABIDE_null_mean) +
scale_x_continuous(limits = c(0.98*(ABIDE_null_mean - ABIDE_null_SD),
1.05*max(ABIDE_SPI_main %>%
filter(bal_acc_p_adj < 0.05) %>%
pull(balanced_accuracy)))) +
xlab("Balanced Accuracy") +
ylab("Pairwise SPI") +
scale_y_discrete(labels = function(x) str_wrap(x, width = 35)) +
theme(axis.line = element_line(color="white"),
axis.text = element_text(color="white"),
axis.title = element_text(color="white"),
axis.ticks = element_line(color="white"))
ggsave(paste0(plot_path, "ABIDE_ASD_SPI_sig_boxplot.png"),
width = 7, height = 2.5, units="in", dpi=300)
g = rep(rev(c(w,x,y,z)),2)
w = 2
x = 4
y = 6
z = 8
a1 = 10
a2 = 12
a3 = 14
a4 = 16
a5 = 18
a6 = 20
a7 = 22
a8 = 24
r = unsplit(lapply(split(v,g),max),c(w,y,x,z))
g = rep(rev(c(w,x,y,z)),2)
v = c(a1,a2,a3,a4,a5,a6,a7,a8)
r = unsplit(lapply(split(v,g),max),c(w,y,x,z))
knitr::opts_chunk$set(echo = F, warning=F, message=F)
library(tidyverse)
library(icesTAF)
library(ggseg)
library(ggsegHO)
# library(ggsegExtra)
library(tidyverse)
library(plotly)
# library(ggseg3d)
# library(ungeviz)
# library(reshape2)
library(patchwork)
library(cowplot)
theme_set(theme_cowplot())
?t.test
univariate_feature_set <- "catch22"
pairwise_feature_set <- "pyspi14"
subject_csv <- "participants.csv"
github_dir <- "D:/Virtual_Machines/Shared_Folder/github/fMRI_FeaturesDisorders/"
github_dir <- "~/github/fMRI_FeaturesDisorders/"
data_path <- "D:/Virtual_Machines/Shared_Folder/PhD_work/data/UCLA_Schizophrenia/"
data_path <- "~/data/UCLA_Schizophrenia/"
dataset_ID <- "UCLA_Schizophrenia"
noise_procs <- c("AROMA+2P", "AROMA+2P+GMR", "AROMA+2P+DiCER")
noise_proc_for_null <- "AROMA+2P+GMR"
ggseg_atlas = "DK"
brain_region_file = "Brain_Region_info.csv"
rdata_path <- paste0(data_path, "processed_data/Rdata/")
plot_path <- paste0(data_path, "plots/")
brain_region_lookup <- read.csv(paste0(data_path, brain_region_file))
# Source null distribution functions
source(paste0(github_dir, "helper_functions/Visualization.R"))
cat("## Univariate linear SVM results for", dataset_ID, "\n")
tryCatch({
# Main vs. null histogram
SPI_wise_main_full <- readRDS(paste0(rdata_path,
"SPI_wise_CV_linear_SVM_",
pairwise_feature_set,
"_inv_prob_balacc.Rds")) %>%
dplyr::filter(Noise_Proc == noise_proc_for_null)
SPI_wise_main <- SPI_wise_main_full %>%
group_by(grouping_var, Sample_Type, Noise_Proc, repeat_number) %>%
summarise(mean_balanced_accuracy = mean(balanced_accuracy, na.rm=T)) %>%
group_by(grouping_var, Sample_Type, Noise_Proc) %>%
summarise(balanced_accuracy = mean(mean_balanced_accuracy, na.rm=T),
SD = sd(mean_balanced_accuracy, na.rm=T))
# UCLA_Schizophrenia_ROI_wise_model_permutation_null_catch22_inv_prob.Rds
SPI_wise_null <- readRDS(paste0(rdata_path, dataset_ID,
"_SPI_wise_model_permutation_null_",
pairwise_feature_set,
"_inv_prob.Rds"))
# Pooled empirical null p-values
SPI_wise_pvals <- readRDS(paste0(rdata_path,
"SPI_wise_CV_linear_SVM_model_permutation_null_",
pairwise_feature_set,
"_inv_prob_pvals.Rds"))
# Define xmin and xmax
xmin = 0.99 * min(c(min(SPI_wise_main$balanced_accuracy)),
c(min(SPI_wise_null$balanced_accuracy)))
xmax = 1.01 * max(c(max(SPI_wise_main$balanced_accuracy)),
c(max(SPI_wise_null$balanced_accuracy)))
plot_main_vs_null_bal_acc(main_res = SPI_wise_main,
null_res = SPI_wise_null,
pvals = SPI_wise_pvals,
noise_proc = noise_proc_for_null,
xmin = xmin,
xmax = xmax,
plot_type = "histogram",
grouping_type = "SPI-wise",
result_color = "darkgoldenrod1") +
ggtitle("Results vs. Empirical Null Model") +
theme(legend.position = "right",
plot.title = element_text(size=13))
}, error = function(e) e)
tryCatch({
SPI_wise_sig <- SPI_wise_pvals %>%
filter(bal_acc_p_adj < 0.05) %>%
ungroup() %>%
dplyr::select(grouping_var, balanced_accuracy, bal_acc_p_adj) %>%
left_join(., SPI_wise_main, by=c("grouping_var")) %>%
dplyr::select(-balanced_accuracy.x) %>%
dplyr::rename("balanced_accuracy" = "balanced_accuracy.y")
SPI_wise_sig %>%
arrange(bal_acc_p_adj, desc(balanced_accuracy)) %>%
dplyr::select(grouping_var, balanced_accuracy, SD, bal_acc_p_adj) %>%
mutate(balanced_accuracy = paste0(round(100*balanced_accuracy, 2), " Â± ", round(100*SD, 2)),
bal_acc_p_adj = format(bal_acc_p_adj, scientific = T,
big.mark = ",")) %>%
dplyr::select(-SD) %>%
dplyr::rename("pyspi SPI" = "grouping_var",
"Balanced Accuracy Â± SD" = "balanced_accuracy",
"BH-adjusted p value" = "bal_acc_p_adj") %>%
knitr::kable(.) %>%
kableExtra::kable_styling(full_width=F)
}, error = function(e) e)
tryCatch({
# Main vs. null histogram
SPI_combo_wise_main_full <- readRDS(paste0(rdata_path,
"univariate_", univariate_feature_set,
"_pairwise_", pairwise_feature_set,
"_CV_linear_SVM_inv_prob_balacc.Rds")) %>%
dplyr::filter(Noise_Proc == noise_proc_for_null)  %>%
dplyr::rename("grouping_var" = "SPI")
SPI_combo_wise_main <- SPI_combo_wise_main_full %>%
group_by(grouping_var, Sample_Type, Noise_Proc, repeat_number) %>%
summarise(mean_balanced_accuracy = mean(balanced_accuracy, na.rm=T)) %>%
group_by(grouping_var, Sample_Type, Noise_Proc) %>%
summarise(balanced_accuracy = mean(mean_balanced_accuracy, na.rm=T),
SD = sd(mean_balanced_accuracy, na.rm=T))
SPI_combo_wise_null <- readRDS(paste0(rdata_path, dataset_ID,
"_univariate_", univariate_feature_set,
"_pairwise_", pairwise_feature_set,
"_model_permutation_null_inv_prob.Rds"))
# Pooled empirical null p-values
SPI_combo_wise_pvals <- readRDS(paste0(rdata_path,
"univariate_", univariate_feature_set,
"_pairwise_", pairwise_feature_set,
"_CV_linear_SVM_model_permutation_null_inv_prob_pvals.Rds"))
# Define xmin and xmax
xmin = 0.99 * min(c(min(SPI_combo_wise_main$balanced_accuracy)),
c(min(SPI_combo_wise_null$balanced_accuracy)))
xmax = 1.01 * max(c(max(SPI_combo_wise_main$balanced_accuracy)),
c(max(SPI_combo_wise_null$balanced_accuracy)))
plot_main_vs_null_bal_acc(main_res = SPI_combo_wise_main,
null_res = SPI_combo_wise_null,
pvals = SPI_combo_wise_pvals,
noise_proc = noise_proc_for_null,
xmin = xmin,
xmax = xmax,
plot_type = "histogram",
grouping_type = "SPI-wise",
result_color = "limegreen") +
ggtitle("Results vs. Empirical Null Model") +
theme(legend.position = "right",
plot.title = element_text(size=13))
}, error = function(e) e)
tryCatch({
SPI_combo_wise_sig <- SPI_combo_wise_pvals %>%
filter(bal_acc_p_adj < 0.05) %>%
ungroup() %>%
dplyr::select(grouping_var, balanced_accuracy, bal_acc_p_adj) %>%
left_join(., SPI_combo_wise_main, by=c("grouping_var")) %>%
dplyr::select(-balanced_accuracy.x) %>%
dplyr::rename("balanced_accuracy" = "balanced_accuracy.y")
SPI_combo_wise_sig %>%
arrange(bal_acc_p_adj, desc(balanced_accuracy)) %>%
dplyr::select(grouping_var, balanced_accuracy, SD, bal_acc_p_adj) %>%
mutate(balanced_accuracy = paste0(round(100*balanced_accuracy, 2), " Â± ", round(100*SD, 2)),
bal_acc_p_adj = format(bal_acc_p_adj, scientific = T,
big.mark = ",")) %>%
dplyr::select(-SD) %>%
dplyr::rename("SPI with Univariate Combo" = "grouping_var",
"Balanced Accuracy Â± SD" = "balanced_accuracy",
"BH-adjusted p value" = "bal_acc_p_adj") %>%
knitr::kable(.) %>%
kableExtra::kable_styling(full_width=F)
}, error = function(e) e)
# Find which SPIs are statistically different with vs without univariate
# combo-wise information
sig_SPIs_diff <- SPI_wise_main_full %>%
mutate(Analysis = "SPI") %>%
plyr::rbind.fill(., SPI_combo_wise_main_full %>%
mutate(Analysis = "SPI + Combo")) %>%
mutate(Analysis = factor(Analysis, levels = c("SPI + Combo", "SPI"))) %>%
nest(data = -grouping_var) %>%
mutate(test = map(data, ~ t.test(balanced_accuracy ~ Analysis, data = .x)),
tidied = map(test, tidy)) %>%
unnest(tidied) %>%
ungroup() %>%
mutate(p.adj = p.adjust(p.value, method="BH")) %>%
filter(p.adj < 0.05) %>%
dplyr::select(grouping_var, estimate:estimate2, statistic, p.value, p.adj)
library(tidyverse)
library(icesTAF)
library(broom)
library(ggseg)
library(ggsegHO)
# library(ggsegExtra)
library(tidyverse)
library(plotly)
# library(ggseg3d)
# library(ungeviz)
# library(reshape2)
library(patchwork)
library(cowplot)
theme_set(theme_cowplot())
SPI_wise_main_full %>%
mutate(Analysis = "SPI") %>%
plyr::rbind.fill(., SPI_combo_wise_main_full %>%
mutate(Analysis = "SPI + Combo")) %>%
mutate(Analysis = factor(Analysis, levels = c("SPI + Combo", "SPI"))) %>%
nest(data = -grouping_var) %>%
mutate(test = map(data, ~ t.test(balanced_accuracy ~ Analysis, data = .x)),
tidied = map(test, tidy)) %>%
unnest(tidied) %>%
ungroup() %>%
mutate(p.adj = p.adjust(p.value, method="BH")) %>%
filter(p.adj < 0.05) %>%
dplyr::select(grouping_var, estimate:estimate2, statistic, p.value, p.adj)
SPI_wise_main_full %>%
mutate(Analysis = "SPI") %>%
plyr::rbind.fill(., SPI_combo_wise_main_full %>%
mutate(Analysis = "SPI + Combo")) %>%
mutate(Analysis = factor(Analysis, levels = c("SPI + Combo", "SPI")))
View(SPI_wise_main)
SPI_wise_main_full %>%
mutate(Analysis = "SPI") %>%
plyr::rbind.fill(., SPI_combo_wise_main_full %>%
mutate(Analysis = "SPI + Combo")) %>%
mutate(Analysis = factor(Analysis, levels = c("SPI + Combo", "SPI"))) %>%
group_by(grouping_var, Analysis, repeat_number) %>%
summarise(mean_balac = mean(balanced_accuracy, na.rm=T)) %>%
dplyr::rename("balanced_accuracy" = "mean_balacc")
SPI_wise_main_full %>%
mutate(Analysis = "SPI") %>%
plyr::rbind.fill(., SPI_combo_wise_main_full %>%
mutate(Analysis = "SPI + Combo")) %>%
mutate(Analysis = factor(Analysis, levels = c("SPI + Combo", "SPI"))) %>%
group_by(grouping_var, Analysis, repeat_number) %>%
summarise(mean_balac = mean(balanced_accuracy, na.rm=T))
SPI_wise_main_full %>%
mutate(Analysis = "SPI") %>%
plyr::rbind.fill(., SPI_combo_wise_main_full %>%
mutate(Analysis = "SPI + Combo")) %>%
mutate(Analysis = factor(Analysis, levels = c("SPI + Combo", "SPI"))) %>%
group_by(grouping_var, Analysis, repeat_number) %>%
summarise(mean_balac = mean(balanced_accuracy, na.rm=T)) %>%
dplyr::rename("balanced_accuracy" = "mean_balac")
SPI_wise_main_full %>%
mutate(Analysis = "SPI") %>%
plyr::rbind.fill(., SPI_combo_wise_main_full %>%
mutate(Analysis = "SPI + Combo")) %>%
mutate(Analysis = factor(Analysis, levels = c("SPI + Combo", "SPI"))) %>%
group_by(grouping_var, Analysis, repeat_number) %>%
summarise(mean_balac = mean(balanced_accuracy, na.rm=T)) %>%
dplyr::rename("balanced_accuracy" = "mean_balac") %>%
arrange(repeat_number) %>%
nest(data = -grouping_var) %>%
mutate(test = map(data, ~ t.test(balanced_accuracy ~ Analysis, data = .x)),
tidied = map(test, tidy)) %>%
unnest(tidied) %>%
ungroup() %>%
mutate(p.adj = p.adjust(p.value, method="BH")) %>%
filter(p.adj < 0.05) %>%
dplyr::select(grouping_var, estimate:estimate2, statistic, p.value, p.adj)
SPI_wise_main_full %>%
mutate(Analysis = "SPI") %>%
plyr::rbind.fill(., SPI_combo_wise_main_full %>%
mutate(Analysis = "SPI + Combo")) %>%
mutate(Analysis = factor(Analysis, levels = c("SPI + Combo", "SPI"))) %>%
group_by(grouping_var, Analysis, repeat_number) %>%
summarise(mean_balac = mean(balanced_accuracy, na.rm=T)) %>%
dplyr::rename("balanced_accuracy" = "mean_balac")
# Find which SPIs are statistically different with vs without univariate
# combo-wise information
sig_SPIs_diff <- SPI_wise_main_full %>%
mutate(Analysis = "SPI") %>%
plyr::rbind.fill(., SPI_combo_wise_main_full %>%
mutate(Analysis = "SPI + Combo")) %>%
mutate(Analysis = factor(Analysis, levels = c("SPI + Combo", "SPI"))) %>%
group_by(grouping_var, Analysis, repeat_number) %>%
summarise(mean_balac = mean(balanced_accuracy, na.rm=T)) %>%
dplyr::rename("balanced_accuracy" = "mean_balac") %>%
arrange(repeat_number) %>%
nest(data = -grouping_var) %>%
mutate(test = map(data, ~ t.test(balanced_accuracy ~ Analysis, data = .x, paired=T)),
tidied = map(test, tidy)) %>%
unnest(tidied) %>%
ungroup() %>%
mutate(p.adj = p.adjust(p.value, method="BH")) %>%
filter(p.adj < 0.05) %>%
dplyr::select(grouping_var, estimate:estimate2, statistic, p.value, p.adj)
SPI_wise_main_full %>%
mutate(Analysis = "SPI") %>%
plyr::rbind.fill(., SPI_combo_wise_main_full %>%
mutate(Analysis = "SPI + Combo")) %>%
mutate(Analysis = factor(Analysis, levels = c("SPI + Combo", "SPI"))) %>%
group_by(grouping_var, Analysis, repeat_number) %>%
summarise(mean_balac = mean(balanced_accuracy, na.rm=T)) %>%
dplyr::rename("balanced_accuracy" = "mean_balac") %>%
arrange(repeat_number) %>%
nest(data = -grouping_var) %>%
mutate(test = map(data, ~ t.test(balanced_accuracy ~ Analysis, data = .x, paired=T)),
tidied = map(test, tidy)) %>%
unnest(tidied) %>%
ungroup()
# Find which SPIs are statistically different with vs without univariate
# combo-wise information
sig_SPIs_diff <- SPI_wise_main_full %>%
mutate(Analysis = "SPI") %>%
plyr::rbind.fill(., SPI_combo_wise_main_full %>%
mutate(Analysis = "SPI + Combo")) %>%
mutate(Analysis = factor(Analysis, levels = c("SPI + Combo", "SPI"))) %>%
group_by(grouping_var, Analysis, repeat_number) %>%
summarise(mean_balac = mean(balanced_accuracy, na.rm=T)) %>%
dplyr::rename("balanced_accuracy" = "mean_balac") %>%
arrange(repeat_number) %>%
nest(data = -grouping_var) %>%
mutate(test = map(data, ~ t.test(balanced_accuracy ~ Analysis, data = .x, paired=T)),
tidied = map(test, tidy)) %>%
unnest(tidied) %>%
ungroup() %>%
mutate(p.adj = p.adjust(p.value, method="BH")) %>%
filter(p.adj < 0.05) %>%
dplyr::select(grouping_var, estimate, statistic, p.value, p.adj)
sig_SPIs_diff %>%
dplyr::rename("SPI" = "grouping_var",
"Mean Difference" = "estimate",
"T-statistic" = "statistic",
"p-value" = "p.value",
"BH" = "p.adj") %>%
knitr::kable(.) %>%
kableExtra::kable_styling(full_width=F)
# Spaghetti plot comparing SPIs with vs without univariate combo info,
# Only those with a significant difference
SPI_combo_wise_main %>%
mutate(Analysis = "SPI + Univariate Combo") %>%
plyr::rbind.fill(., SPI_wise_main %>% mutate(Analysis = "SPI")) %>%
filter(grouping_var %in% sig_SPIs_diff$grouping_var) %>%
mutate(grouping_var = fct_reorder(grouping_var, balanced_accuracy, .fun=max,
.desc=T)) %>%
ggplot(data=., mapping=aes(x=Analysis,
y=balanced_accuracy,
group=grouping_var,
color = grouping_var)) +
geom_line(size=1.5) +
ylab("10-repeat 10-fold CV Balanced Accuracy") +
xlab("Pairwise Analysis Type") +
labs(color = "SPI")
setwd("~/github/fMRI_FeaturesDisorders/main_analyses")
rmarkdown::render(input = "~/github/fMRI_FeaturesDisorders/main_analyses/dataset_analysis_template.Rmd",
output_file = "UCLA_Schizophrenia_Classification_Analysis.html",
params = list(data_path = "~/data/UCLA_Schizophrenia/",
dataset_ID = "UCLA_Schizophrenia",
github_dir = "~/github/fMRI_FeaturesDisorders/",
univariate_feature_set = "catch22",
pairwise_feature_set = "pyspi14",
ggseg_atlas = "DK",
brain_region_file = "Brain_Region_info.csv",
noise_procs = c("AROMA+2P", "AROMA+2P+GMR", "AROMA+2P+DiCER"),
noise_proc_for_null = "AROMA+2P+GMR"))
rmarkdown::render(input = "~/github/fMRI_FeaturesDisorders/main_analyses/dataset_analysis_template.Rmd",
output_file = "ABIDE_ASD_Classification_Analysis.html",
params = list(data_path = "~/data/ABIDE_ASD/",
dataset_ID = "ABIDE_ASD",
github_dir = "~/github/fMRI_FeaturesDisorders/",
univariate_feature_set = "catch22",
pairwise_feature_set = "pyspi14",
ggseg_atlas = "HO",
brain_region_file = "Harvard_Oxford_cort_prob_2mm_ROI_lookup.csv",
noise_procs = c("FC1000"),
noise_proc_for_null = "FC1000"))
