shuffle_labels = F,
out_of_sample_only = T) %>%
dplyr::mutate(Brain_Region = top_region,
FD_threshold = fd_threshold)
fd_thresh_list <- rlist::list.append(fd_thresh_list, SVM_results)
}
}
SCZ_threshold_SVM_res <- do.call(plyr::rbind.fill, fd_thresh_list)
SCZ_threshold_SVM_res %>%
group_by(FD_threshold) %>%
summarise(balanced_accuracy = caret::confusionMatrix(data = Predicted_Diagnosis,
reference = Actual_Diagnosis)$byClass[["Balanced Accuracy"]]) %>%
ggplot(data=., mapping=aes(x=FD_threshold, y=100*balanced_accuracy)) +
geom_line() +
xlab("Fractional Displacement (FD) Maximum Threshold") +
ylab("Balanced Accuracy")
ggsave(paste0(plot_path, "SCZ_FD_threshold_SVM_balanced_accuracy.png"),
width = 5, height = 2.5, units="in", dpi=300, bg="white")
source(paste0(github_dir, "helper_functions/classification/Linear_SVM.R"))
source(paste0(github_dir, "helper_functions/data_prep_and_QC/QC_functions_univariate.R"))
source(paste0(github_dir, "helper_functions/data_prep_and_QC/QC_functions_pairwise.R"))
plot_path <- paste0(github_dir, "plots/QC/")
icesTAF::mkdir(plot_path)
SCZ_data_path <- "~/data/UCLA_Schizophrenia/"
SCZ_rdata_path <- paste0(SCZ_data_path, "processed_data/Rdata/")
ASD_data_path <- "~/data/ABIDE_ASD/"
ASD_rdata_path <- paste0(ASD_data_path, "processed_data/Rdata/")
# Load unfiltered catch22 per dataset
SCZ_catch22 <- readRDS(paste0(SCZ_rdata_path, "UCLA_Schizophrenia_catch22.Rds"))
ASD_catch22 <- readRDS(paste0(ASD_rdata_path, "ABIDE_ASD_catch22.Rds"))
find_univariate_sample_na(TS_feature_data = SCZ_catch22,
dataset_ID = "UCLA_Schizophrenia",
univariate_feature_set = "catch22")
library(knitr)
library(kableExtra)
NA_subjects %>%
kable() %>%
kable_styling(full_width=F)
SCZ_NA_subjects <- find_univariate_sample_na(TS_feature_data = SCZ_catch22,
dataset_ID = "UCLA_Schizophrenia",
univariate_feature_set = "catch22")
SCZ_NA_subjects %>%
kable() %>%
kable_styling(full_width=F)
SCZ_noise_procs <- c("AROMA+2P", "AROMA+2P+GMR", "AROMA+2P+DiCER")
ASD_noise_procs <- c("FC1000")
univariate_feature_set <- "catch22"
pairwise_feature_set <- "pyspi14"
SCZ_noise_procs <- c("AROMA+2P", "AROMA+2P+GMR", "AROMA+2P+DiCER")
ASD_noise_procs <- c("FC1000")
plot_NA_sample_ts(dataset_ID = "UCLA_Schizophrenia",
grouping_var = "Brain_Region",
raw_TS_file = paste0(SCZ_data_path, "raw_data/UCLA_Schizophrenia_fMRI_TS.Rds"),
univariate_feature_set = univariate_feature_set,
NA_sample_IDs = SCZ_NA_subjects,
noise_procs = SCZ_noise_procs)
rlang::last_error()
dataset_ID = "UCLA_Schizophrenia"
grouping_var = "Brain_Region"
raw_TS_file = paste0(SCZ_data_path, "raw_data/UCLA_Schizophrenia_fMRI_TS.Rds")
NA_sample_IDs = SCZ_NA_subjects
noise_procs = SCZ_noise_procs
ts_data <- readRDS(raw_TS_file)
ts_data %>%
filter(Sample_ID %in% NA_sample_IDs)
# Find SCZ subjects with NA values for one or more catch22 features
SCZ_NA_subjects <- find_univariate_sample_na(TS_feature_data = SCZ_catch22,
dataset_ID = "UCLA_Schizophrenia",
univariate_feature_set = "catch22")
SCZ_NA_subjects %>%
kable() %>%
kable_styling(full_width=F)
NA_sample_IDs = SCZ_NA_subjects$Sample_ID
ts_data %>%
filter(Sample_ID %in% NA_sample_IDs)
ts_data %>%
filter(Sample_ID %in% NA_sample_IDs) %>%
ggplot(data=., mapping=aes_string(x="timepoint", y="value", color=grouping_var)) +
ggtitle(sprintf("Raw time-series for %s\nNA samples with %s",
gsub("_", " ", dataset_ID), univariate_feature_set)) +
geom_line(alpha=0.6) +
facet_grid(Sample_ID ~ Noise_Proc, switch="y") +
theme(legend.position="none",
strip.text.y.left = element_text(angle=0),
plot.title = element_text(hjust=0.5))
ts_data %>%
filter(Sample_ID %in% NA_sample_IDs) %>%
ggplot(data=., mapping=aes_string(x="timepoint", y="value", color=grouping_var)) +
ggtitle(sprintf("Raw time-series for %s\nNA samples with %s",
gsub("_", " ", dataset_ID), univariate_feature_set))
ts_data %>%
filter(Sample_ID %in% NA_sample_IDs) %>%
ggplot(data=., mapping=aes_string(x="timepoint", y="values", color=grouping_var)) +
ggtitle(sprintf("Raw time-series for %s\nNA samples with %s",
gsub("_", " ", dataset_ID), univariate_feature_set)) +
geom_line(alpha=0.6) +
facet_grid(Sample_ID ~ Noise_Proc, switch="y") +
theme(legend.position="none",
strip.text.y.left = element_text(angle=0),
plot.title = element_text(hjust=0.5))
#------------------------------------
# This script compiles movement data across the UCLA subjects
#------------------------------------
#--------------------------------------
# Author: Annie Bryant, 28 August 2022
#--------------------------------------
library(tidyverse)
library(theft)
#-------------------------------------------------------------------------------
# Function to read in univariate TS feature data and return subjects with NA
# values. For each noise-processing method, the number of TS features with all
# NA for all brain regions are given.
#-------------------------------------------------------------------------------
find_univariate_sample_na <- function(TS_feature_data,
dataset_ID = "UCLA_Schizophrenia",
univariate_feature_set = "catch22") {
NA_sample_data <- TS_feature_data %>%
group_by(Sample_ID, Noise_Proc, names) %>%
filter(all(is.na(values))) %>%
ungroup() %>%
distinct(Sample_ID, Noise_Proc, names) %>%
group_by(Sample_ID, Noise_Proc) %>%
dplyr::summarise(num_na = n()) %>%
# Only want to see subjects with NA for more than one feature
filter(num_na > 1) %>%
tidyr::pivot_wider(id_cols=Sample_ID, names_from=Noise_Proc, values_from=num_na) %>%
mutate_all(~replace(., is.na(.), 0))
return(NA_sample_data)
}
#-------------------------------------------------------------------------------
# Function to read in univariate TS feature data and return features with
# NA for all subjects/brain regions
#-------------------------------------------------------------------------------
find_univariate_feature_na <- function(TS_feature_data,
dataset_ID = "UCLA_Schizophrenia",
univariate_feature_set = "catch22") {
NA_feature_data <- TS_feature_data %>%
group_by(names, Noise_Proc) %>%
filter(all(is.na(values))) %>%
distinct(names, Noise_Proc)
return(NA_feature_data)
}
#-------------------------------------------------------------------------------
# Function to read in a univariate TS feature matrix, z-score it, and save
# the z-scored matrix
#-------------------------------------------------------------------------------
z_score_feature_matrix <- function(noise_proc,
TS_feature_data) {
TS_feature_data_np <- subset(TS_feature_data, Noise_Proc == noise_proc)
TS_feature_data_z <- normalise_feature_frame(TS_feature_data_np,
names_var = "names",
values_var = "values",
method = "z-score")
return(TS_feature_data_z)
}
z_score_all_noise_procs <- function(TS_feature_data,
noise_procs = c("AROMA+2P",
"AROMA+2P+GMR",
"AROMA+2P+DiCER")) {
TS_feature_data_z <- noise_procs %>%
purrr::map_df( ~ z_score_feature_matrix(noise_proc = .x,
TS_feature_data = TS_feature_data))
return(TS_feature_data_z)
}
#-------------------------------------------------------------------------------
# Plot raw time-series data for subjects with NA values for all ROIs/features
#-------------------------------------------------------------------------------
plot_NA_sample_ts <- function(dataset_ID = "UCLA_Schizophrenia",
grouping_var = "Brain_Region",
raw_TS_file = "UCLA_Schizophrenia_fMRI_data.Rds",
univariate_feature_set = "catch22",
NA_sample_IDs = c(),
noise_procs = c("AROMA+2P",
"AROMA+2P+GMR",
"AROMA+2P+DiCER")) {
if (length(NA_sample_IDs) > 0) {
ts_data <- readRDS(raw_TS_file)
ts_data %>%
filter(Sample_ID %in% NA_sample_IDs) %>%
ggplot(data=., mapping=aes_string(x="timepoint", y="values", color=grouping_var)) +
ggtitle(sprintf("Raw time-series for %s\nNA samples with %s",
gsub("_", " ", dataset_ID), univariate_feature_set)) +
geom_line(alpha=0.6) +
facet_grid(Sample_ID ~ Noise_Proc, switch="y") +
theme(legend.position="none",
strip.text.y.left = element_text(angle=0),
plot.title = element_text(hjust=0.5))
} else {
cat("No NA data to show.\n")
}
}
#-------------------------------------------------------------------------------
# Function to drop a list of samples from the given feature matrix
#-------------------------------------------------------------------------------
remove_samples_from_feature_matrix <- function(TS_feature_data,
sample_IDs_to_drop = c()) {
cat("\nDropping samples:", paste(sample_IDs_to_drop, collapse=", "), "\n")
TS_feature_data_filtered <- TS_feature_data %>%
dplyr::filter(!(Sample_ID %in% sample_IDs_to_drop))
return(TS_feature_data_filtered)
}
#-------------------------------------------------------------------------------
# Function to drop a feature(s) from the given feature matrix
#-------------------------------------------------------------------------------
remove_features_from_feature_matrix <- function(TS_feature_data,
features_to_drop = c()) {
if (length(features_to_drop) > 0) {
cat("\nDropping features:", paste(names, collapse=", "), "\n")
TS_feature_data_filtered <- TS_feature_data %>%
dplyr::filter(!(names %in% features_to_drop))
return(TS_feature_data_filtered)
} else {
return(TS_feature_data)
}
}
#-------------------------------------------------------------------------------
# Function to run quality control methods for univariate data
#-------------------------------------------------------------------------------
run_QC_for_univariate_dataset <- function(data_path,
proc_rdata_path,
sample_metadata_file = "UCLA_Schizophrenia_sample_metadata.Rds",
dataset_ID = "UCLA_Schizophrenia",
univariate_feature_set = "catch22",
raw_TS_file = "UCLA_Schizophrenia_fMRI_data.Rds",
noise_procs = c("AROMA+2P",
"AROMA+2P+GMR",
"AROMA+2P+DiCER"),
plot_dir) {
if (is.null(proc_rdata_path)) {
proc_rdata_path <- paste0(data_path, "processed_data/Rdata/")
}
# Load sample metadata
sample_metadata <- readRDS(paste0(data_path, sample_metadata_file))
# Filter to schizophrenia and control for UCLA
if (dataset_ID == "UCLA_Schizophrenia") {
sample_metadata <- sample_metadata %>%
filter(Diagnosis %in% c("Control", "Schizophrenia"))
}
# Load TS feature data and subset by noise_proc
TS_feature_data <- readRDS(paste0(proc_rdata_path, dataset_ID, "_",
univariate_feature_set, ".Rds"))
# Samples identified with missing data for all features:
univar_NA_samples <- find_univariate_sample_na(TS_feature_data,
dataset_ID = dataset_ID,
univariate_feature_set = univariate_feature_set) %>%
pull(Sample_ID)
# Plot the raw time-series data for these samples to confirm:
tryCatch({
plot_NA_sample_ts(dataset_ID = dataset_ID,
raw_TS_file = raw_TS_file,
NA_sample_IDs = univar_NA_samples,
univariate_feature_set = "catch22",
grouping_var = "Brain_Region",
noise_procs = noise_procs)
ggsave(paste0(plot_dir, dataset_ID, "_NA_TimeSeries.png"),
width = 6, height = 6, units="in", dpi=300)
}, error = function(e) cat("No NA time-series to plot.\n"))
# Drop any samples shown above with NA features for
# one or more noise-processing methods:
TS_feature_data_filtered <- remove_samples_from_feature_matrix(TS_feature_data = TS_feature_data,
sample_IDs_to_drop = univar_NA_samples)
# Features identified with missing data for all samples:
univar_NA_features <- find_univariate_feature_na(TS_feature_data_filtered,
dataset_ID = dataset_ID,
univariate_feature_set = univariate_feature_set) %>%
pull(names)
# Drop any samples shown above with NA features for
# one or more noise-processing methods:
TS_feature_data_filtered <- remove_features_from_feature_matrix(TS_feature_data = TS_feature_data_filtered,
features_to_drop = univar_NA_features)
# Filter to samples in metadata
TS_feature_data_filtered <- TS_feature_data_filtered %>%
dplyr::filter(Sample_ID %in% sample_metadata$Sample_ID)
# Save filtered data to RDS
saveRDS(TS_feature_data_filtered, file=paste0(proc_rdata_path,
sprintf("%s_%s_filtered.Rds",
dataset_ID,
univariate_feature_set)))
# Save sample data post-filtering to an `.Rds` file:
filtered_sample_info <- TS_feature_data_filtered %>%
distinct(Sample_ID)
saveRDS(filtered_sample_info, file=paste0(proc_rdata_path,
sprintf("%s_filtered_sample_info_%s.Rds",
dataset_ID,
univariate_feature_set)))
cat("Sample info saved to:", paste0(proc_rdata_path,
sprintf("%s_filtered_sample_info_%s.Rds",
dataset_ID,
univariate_feature_set)), "\n")
# Data normalisation: z-score the feature matrix as well.
TS_df_z <- z_score_all_noise_procs(TS_feature_data = TS_feature_data_filtered,
noise_procs = noise_procs)
saveRDS(TS_df_z, file = paste0(proc_rdata_path, sprintf("%s_%s_filtered_zscored.Rds",
dataset_ID,
univariate_feature_set)))
cat("\nZ-scored data saved to:", paste0(proc_rdata_path, sprintf("%s_%s_filtered_zscored.Rds",
dataset_ID,
univariate_feature_set)),
"\n")
}
plot_NA_sample_ts(dataset_ID = "UCLA_Schizophrenia",
grouping_var = "Brain_Region",
raw_TS_file = paste0(SCZ_data_path, "raw_data/UCLA_Schizophrenia_fMRI_TS.Rds"),
univariate_feature_set = univariate_feature_set,
NA_sample_IDs = SCZ_NA_subjects$Sample_ID,
noise_procs = SCZ_noise_procs)
# Plot their time-series
plot_NA_sample_ts(dataset_ID = "UCLA_Schizophrenia",
grouping_var = "Brain_Region",
raw_TS_file = paste0(SCZ_data_path, "raw_data/UCLA_Schizophrenia_fMRI_TS.Rds"),
univariate_feature_set = univariate_feature_set,
NA_sample_IDs = SCZ_NA_subjects$Sample_ID,
noise_procs = SCZ_noise_procs)
ggsave(paste0(plot_path,
sprintf("SCZ_Raw_fMRI_Signal_NA_Subjects_Univariate_%s.png",
univariate_feature_set)),
width=7, height=6, units="in", dpi=300, bg="white")
find_univariate_feature_na(TS_feature_data = SCZ_catch22,
dataset_ID = "UCLA_Schizophrenia",
univariate_feature_set = "catch22")
# Find catch22 features that are missing for most/all SCZ participants
SCZ_NA_features <- find_univariate_feature_na(TS_feature_data = SCZ_catch22,
dataset_ID = "UCLA_Schizophrenia",
univariate_feature_set = "catch22")
SCZ_NA_features %>%
kable() %>%
kable_styling(full_width=F)
ASD_NA_subjects <- find_univariate_sample_na(TS_feature_data = ASD_catch22,
dataset_ID = "ABIDE_ASD",
univariate_feature_set = "catch22")
ASD_NA_subjects %>%
kable() %>%
kable_styling(full_width=F)
# Load subject metadata
SCZ_subject_metadata <- readRDS(paste0(SCZ_data_path, "UCLA_Schizophrenia_sample_metadata.Rds")) %>%
dplyr::filter(Diagnosis %in% c("Control", "Schizophrenia"))
ASD_subject_metadata <- readRDS(paste0(ASD_data_path, "ABIDE_ASD_sample_metadata.Rds"))
SCZ_NA_subjects %>%
left_join(., SCZ_subject_metadata %>% dplyr::select(Sample_ID, Diagnosis)) %>%
kable() %>%
kable_styling(full_width=F)
SCZ_NA_subjects %>%
left_join(., SCZ_subject_metadata %>% dplyr::select(Sample_ID, Diagnosis)) %>%
dplyr::select(Sample_ID, Diagnosis, `AROMA+2P`:`AROMA+2P_GMR`) %>%
kable() %>%
kable_styling(full_width=F)
SCZ_NA_subjects %>%
left_join(., SCZ_subject_metadata %>% dplyr::select(Sample_ID, Diagnosis)) %>%
dplyr::select(Sample_ID, Diagnosis, `AROMA+2P`:`AROMA+2P+GMR`) %>%
kable() %>%
kable_styling(full_width=F)
SCZ_catch22 <- readRDS(paste0(SCZ_rdata_path, "UCLA_Schizophrenia_catch22.Rds")) %>%
left_join(., SCZ_subject_metadata) %>%
filter(Diagnosis %in% c("Control", "Schizophrenia"))
ASD_catch22 <- readRDS(paste0(ASD_rdata_path, "ABIDE_ASD_catch22.Rds")) %>%
left_join(., ASD_subject_metadata) %>%
filter(Diagnosis %in% c("Control", "ASD"))
# Find SCZ subjects with NA values for one or more catch22 features
SCZ_NA_subjects <- find_univariate_sample_na(TS_feature_data = SCZ_catch22,
dataset_ID = "UCLA_Schizophrenia",
univariate_feature_set = "catch22")
SCZ_NA_subjects %>%
left_join(., SCZ_subject_metadata %>% dplyr::select(Sample_ID, Diagnosis)) %>%
dplyr::select(Sample_ID, Diagnosis, `AROMA+2P`:`AROMA+2P+GMR`) %>%
kable() %>%
kable_styling(full_width=F)
plot_NA_sample_ts(dataset_ID = "UCLA_Schizophrenia",
grouping_var = "Brain_Region",
raw_TS_file = paste0(SCZ_data_path, "raw_data/UCLA_Schizophrenia_fMRI_TS.Rds"),
univariate_feature_set = univariate_feature_set,
NA_sample_IDs = SCZ_NA_subjects$Sample_ID,
noise_procs = SCZ_noise_procs)
ggsave(paste0(plot_path,
sprintf("SCZ_Raw_fMRI_Signal_NA_Subjects_Univariate_%s.png",
univariate_feature_set)),
width=7, height=6, units="in", dpi=300, bg="white")
ASD_NA_features <- find_univariate_feature_na(TS_feature_data = ASD_catch22,
dataset_ID = "ABIDE_ASD",
univariate_feature_set = "catch22")
ASD_NA_features %>%
kable() %>%
kable_styling(full_width=F)
ASD_subject_metadata %>%
group_by(Diagnosis, site) %>%
count()
length(unique(ASD_subject_metadata$site))
ASD_subject_metadata %>%
group_by(Diagnosis, site) %>%
count() %>%
pivot_wider(id_cols = site,
names_from = Diagnosis,
values_from = n)
ASD_subject_metadata %>%
group_by(Diagnosis, site) %>%
count() %>%
pivot_wider(id_cols = site,
names_from = Diagnosis,
values_from = n) %>%
mutate(ASD = ifelse(is.na(ASD), 0, ASD),
Control = ifelse(is.na(Control), 0, Control))
site_counts <- ASD_subject_metadata %>%
group_by(Diagnosis, site) %>%
count() %>%
pivot_wider(id_cols = site,
names_from = Diagnosis,
values_from = n) %>%
mutate(ASD = ifelse(is.na(ASD), 0, ASD),
Control = ifelse(is.na(Control), 0, Control))
View(site_counts)
github_dir <- "~/github/fMRI_FeaturesDisorders/"
source(paste0(github_dir, "helper_functions/classification/Linear_SVM.R"))
plot_path <- paste0(github_dir, "plots/EDA/")
icesTAF::mkdir(plot_path)
SCZ_data_path <- "~/data/UCLA_Schizophrenia/"
SCZ_rdata_path <- paste0(SCZ_data_path, "processed_data/Rdata/")
ASD_data_path <- "~/data/ABIDE_ASD/"
ASD_rdata_path <- paste0(ASD_data_path, "processed_data/Rdata/")
# Load subject metadata
SCZ_subject_metadata <- readRDS(paste0(SCZ_data_path, "UCLA_Schizophrenia_sample_metadata.Rds")) %>%
dplyr::filter(Diagnosis %in% c("Control", "Schizophrenia"))
ASD_subject_metadata <- readRDS(paste0(ASD_data_path, "ABIDE_ASD_sample_metadata.Rds"))
SVM_res <- readRDS(paste0(SCZ_rdata_path,
"ROI_wise_CV_linear_SVM_catch22_inv_prob_balacc_across_repeats.Rds"))
SVM_res <- readRDS(paste0(SCZ_rdata_path,
"ROI_wise_CV_linear_SVM_catch22_inv_prob.Rds"))
SVM_res %>%
distinct(Sample_ID, Actual_Diagnosis)
SVM_res %>%
distinct(Sample_ID, Actual_Diagnosis) %>%
group_by(Actual_Diagnosis) %>%
count()
SVM_res <- readRDS(paste0(ASD_rdata_path,
"ROI_wise_CV_linear_SVM_catch22_inv_prob.Rds"))
SVM_res %>%
distinct(Sample_ID, Actual_Diagnosis) %>%
group_by(Actual_Diagnosis) %>%
count()
# Load subject metadata
SCZ_subject_metadata <- readRDS(paste0(SCZ_data_path, "UCLA_Schizophrenia_sample_metadata.Rds"))
# Load fractional displacement (movement) data
SCZ_movement_data <- compile_movement_data(fd_path = paste0(SCZ_data_path, "movementData/"),
input_dataset_name = "UCLA_Schizophrenia",
sample_metadata = SCZ_subject_metadata) %>%
filter(!is.na(Diagnosis))
github_dir <- "~/github/fMRI_FeaturesDisorders/"
source(paste0(github_dir, "helper_functions/classification/Linear_SVM.R"))
source(paste0(github_dir, "data_visualisation/manuscript_figures/Manuscript_Draft_Visualisations_Helper.R"))
plot_path <- paste0(github_dir, "plots/Manuscript_Draft/FigureS1/")
icesTAF::mkdir(plot_path)
SCZ_movement_data <- compile_movement_data(fd_path = paste0(SCZ_data_path, "movementData/"),
input_dataset_name = "UCLA_Schizophrenia",
sample_metadata = SCZ_subject_metadata) %>%
filter(!is.na(Diagnosis))
SCZ_movement_data %>%
ggplot(data=., mapping=aes(x=Diagnosis, y=FD)) +
geom_violin(aes(fill=Diagnosis)) +
geom_boxplot(color="black", fill=NA, width=0.1) +
ylab("Fractional Displacement (FD)") +
xlab("Group") +
scale_fill_manual(values = c("#00B06D", "#737373")) +
theme(legend.position="none",
plot.title=element_text(hjust=0.5))
library(ggsignif)
library(ggpubr)
library(tidyverse)
library(icesTAF)
library(cowplot)
library(ggpubr)
library(ggsignif)
theme_set(theme_cowplot())
github_dir <- "~/github/fMRI_FeaturesDisorders/"
source(paste0(github_dir, "helper_functions/classification/Linear_SVM.R"))
source(paste0(github_dir, "data_visualisation/manuscript_figures/Manuscript_Draft_Visualisations_Helper.R"))
plot_path <- paste0(github_dir, "plots/Manuscript_Draft/FigureS1/")
icesTAF::mkdir(plot_path)
SCZ_data_path <- "~/data/UCLA_Schizophrenia/"
SCZ_rdata_path <- paste0(SCZ_data_path, "processed_data/Rdata/")
# Load subject metadata
SCZ_subject_metadata <- readRDS(paste0(SCZ_data_path, "UCLA_Schizophrenia_sample_metadata.Rds"))
# Load fractional displacement (movement) data
SCZ_movement_data <- compile_movement_data(fd_path = paste0(SCZ_data_path, "movementData/"),
input_dataset_name = "UCLA_Schizophrenia",
sample_metadata = SCZ_subject_metadata) %>%
filter(!is.na(Diagnosis))
?geom_signif
SCZ_movement_data %>%
ggplot(data=., mapping=aes(x=Diagnosis, y=FD)) +
geom_violin(aes(fill=Diagnosis)) +
geom_boxplot(color="black", fill=NA, width=0.1) +
ylab("Fractional Displacement (FD)") +
xlab("Group") +
scale_fill_manual(values = c("#00B06D", "#737373")) +
theme(legend.position="none",
plot.title=element_text(hjust=0.5)) +
geom_signif(test = "wilcox.test",
comparisons = list(c("Schizophrenia", "Control")),
map_signif_level=TRUE)
SCZ_movement_data %>%
ggplot(data=., mapping=aes(x=Diagnosis, y=FD)) +
geom_violin(aes(fill=Diagnosis)) +
geom_boxplot(color="black", fill=NA, width=0.1) +
ylab("Fractional Displacement (FD)") +
xlab("Group") +
scale_fill_manual(values = c("#00B06D", "#737373")) +
theme(legend.position="none",
plot.title=element_text(hjust=0.5)) +
geom_signif(test = "wilcox.test",
comparisons = list(c("Schizophrenia", "Control")),
map_signif_level=TRUE)
ggsave(paste0(plot_path, "SCZ_FD_by_group_violin.png"),
width = 4, height = 4, units="in", dpi=300, bg="white")
wilcox.test(FD ~ Diagnosis, data = SCZ_movement_data)
