values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
type = "Movement Only"
type_label = "Movement Only"
data_for_SVM <- movement_data_thresh %>%
dplyr::select(Sample_ID, Diagnosis, movement_var)
View(data_for_SVM)
run_repeat_cv_linear_svm <- function(mvmt_list = seq(0.12, 0.5, by=0.02),
movement_data,
movement_var = "FD",
sample_groups,
catch22_data,
type = "Brain Region",
input_region = "") {
# Iterate over each threshold
df_list <- list()
# Iterate over thresholds from 0 to 1 at intervals of 0.05
for (movement_threshold in mvmt_list) {
# Data thresholded by FD
movement_data_thresh <- movement_data %>%
mutate(movement_var = get(movement_var)) %>%
filter(movement_var <= movement_threshold)
catch22_data_thresh <- subset(catch22_data,
Sample_ID %in% movement_data_thresh$Sample_ID)
# Define sample weights for inverse probability weighting
sample_wts <- as.list(1/prop.table(table(movement_data_thresh$Diagnosis)))
if (type=="Brain Region") {
# Prep data for SVM
data_for_SVM <- catch22_data_thresh %>%
filter(Brain_Region == input_region) %>%
dplyr::ungroup() %>%
left_join(., sample_groups) %>%
dplyr::select(Sample_ID, Diagnosis, names, values) %>%
distinct(.keep_all = T) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = names,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
type_label = input_region
} else if (type=="Combo") {
type_label = "catch22 Combo"
# Prep data for SVM
data_for_SVM <- catch22_data_thresh %>%
unite("Combo", c("Brain_Region", "names"), sep="_", remove=F) %>%
dplyr::ungroup() %>%
left_join(., sample_groups) %>%
dplyr::select(Sample_ID, Diagnosis, Combo, values) %>%
distinct(.keep_all = T) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = Combo,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
} else if (type=="Movement Only") {
type_label = "Movement Only"
data_for_SVM <- movement_data_thresh %>%
dplyr::select(Sample_ID, Diagnosis, movement_var)
}
# Run linear SVM
if (nrow(data_for_SVM) > 0) {
SVM_results <- 1:nrepeats %>%
purrr::map_df( ~ k_fold_CV_linear_SVM(input_data = data_for_SVM,
k = num_k_folds,
svm_kernel = svm_kernel,
sample_wts = sample_wts,
shuffle_labels = F,
out_of_sample_only = T)%>%
dplyr::mutate(repeat_number = .x,
movement_threshold = movement_threshold))
df_list <- list.append(df_list, SVM_results)
}
}
SVM_res <- do.call(plyr::rbind.fill, df_list)  %>%
group_by(movement_threshold, repeat_number) %>%
summarise(balanced_accuracy = caret::confusionMatrix(data = Predicted_Diagnosis,
reference = Actual_Diagnosis)$byClass[["Balanced Accuracy"]]) %>%
group_by(movement_threshold) %>%
summarise(meanbacc = 100*mean(balanced_accuracy),
sdbacc = 100*sd(balanced_accuracy)) %>%
mutate(Method = type_label)
}
univariate_feature_set <- "catch22"
pairwise_feature_set <- "pyspi14"
num_k_folds <- 10
nrepeats <- 10
svm_kernel <- "linear"
# Function to run 10-repeat 10-fold linear SVM
run_repeat_cv_linear_svm <- function(mvmt_list = seq(0.12, 0.5, by=0.02),
movement_data,
movement_var = "FD",
sample_groups,
catch22_data,
type = "Brain Region",
input_region = "") {
# Iterate over each threshold
df_list <- list()
# Iterate over thresholds from 0 to 1 at intervals of 0.05
for (movement_threshold in mvmt_list) {
# Data thresholded by FD
movement_data_thresh <- movement_data %>%
mutate(movement_var = get(movement_var)) %>%
filter(movement_var <= movement_threshold)
catch22_data_thresh <- subset(catch22_data,
Sample_ID %in% movement_data_thresh$Sample_ID)
# Define sample weights for inverse probability weighting
sample_wts <- as.list(1/prop.table(table(movement_data_thresh$Diagnosis)))
if (type=="Brain Region") {
# Prep data for SVM
data_for_SVM <- catch22_data_thresh %>%
filter(Brain_Region == input_region) %>%
dplyr::ungroup() %>%
left_join(., sample_groups) %>%
dplyr::select(Sample_ID, Diagnosis, names, values) %>%
distinct(.keep_all = T) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = names,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
type_label = input_region
} else if (type=="Combo") {
type_label = "catch22 Combo"
# Prep data for SVM
data_for_SVM <- catch22_data_thresh %>%
unite("Combo", c("Brain_Region", "names"), sep="_", remove=F) %>%
dplyr::ungroup() %>%
left_join(., sample_groups) %>%
dplyr::select(Sample_ID, Diagnosis, Combo, values) %>%
distinct(.keep_all = T) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = Combo,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
} else if (type=="Movement Only") {
type_label = "Movement Only"
data_for_SVM <- movement_data_thresh %>%
dplyr::select(Sample_ID, Diagnosis, movement_var)
}
# Run linear SVM
if (nrow(data_for_SVM) > 0) {
SVM_results <- 1:nrepeats %>%
purrr::map_df( ~ k_fold_CV_linear_SVM(input_data = data_for_SVM,
k = num_k_folds,
svm_kernel = svm_kernel,
sample_wts = sample_wts,
shuffle_labels = F,
out_of_sample_only = T)%>%
dplyr::mutate(repeat_number = .x,
movement_threshold = movement_threshold))
df_list <- list.append(df_list, SVM_results)
}
}
SVM_res <- do.call(plyr::rbind.fill, df_list)  %>%
group_by(movement_threshold, repeat_number) %>%
summarise(balanced_accuracy = caret::confusionMatrix(data = Predicted_Diagnosis,
reference = Actual_Diagnosis)$byClass[["Balanced Accuracy"]]) %>%
group_by(movement_threshold) %>%
summarise(meanbacc = 100*mean(balanced_accuracy),
sdbacc = 100*sd(balanced_accuracy)) %>%
mutate(Method = type_label)
}
combo_catch22_svm_res <- run_repeat_cv_linear_svm(
mvmt_list = seq(0.12, 0.5, by=0.02),
movement_data = SCZ_movement_data,
catch22_data = SCZ_catch22_zscored,
movement_var = "FD",
type = "Combo",
sample_groups = SCZ_sample_groups
)
mvmt_svm_res <- run_repeat_cv_linear_svm(movement_data = SCZ_movement_data,
catch22_data = SCZ_catch22_zscored,
movement_var = "FD",
type = "Movement Only",
sample_groups = SCZ_sample_groups
)
setwd("~/github/fMRI_FeaturesDisorders/data_visualisation/manuscript_figures")
# Run SVM with various FD threshold cutoffs using univariate combo catch22
SCZ_combo_catch22_svm_res <- run_repeat_cv_linear_svm(
mvmt_list = seq(0.12, 0.5, by=0.02),
movement_data = SCZ_movement_data,
catch22_data = SCZ_catch22_zscored,
movement_var = "FD",
type = "Combo",
sample_groups = SCZ_sample_groups
)
# Run SVM with various FD threshold cutoffs using right postcentral cortex catch22
SCZ_ROI_catch22_svm_res <- run_repeat_cv_linear_svm(movement_data = SCZ_movement_data,
catch22_data = SCZ_catch22_zscored,
movement_var = "FD",
type = "Brain Region",
input_region = "ctx-rh-postcentral",
sample_groups = SCZ_sample_groups
)
# Run SVM with various FD threshold cutoffs using just movement data
SCZ_mvmt_svm_res <- run_repeat_cv_linear_svm(movement_data = SCZ_movement_data,
catch22_data = SCZ_catch22_zscored,
movement_var = "FD",
type = "Movement Only",
sample_groups = SCZ_sample_groups
)
save(SCZ_combo_catch22_svm_res,
SCZ_ROI_catch22_svm_res,
SCZ_mvmt_svm_res,
file="SCZ_SVM_with_Movement_Thresholds.Rdata")
ASD_catch22_zscored <- readRDS(paste0(ASD_rdata_path,
"ABIDE_ASD_catch22_filtered_zscored.Rds")) %>%
filter(Noise_Proc == noise_proc)
ASD_data_path <- "~/data/ABIDE_ASD/"
ASD_rdata_path <- paste0(ABIDE_data_path, "processed_data/Rdata/")
ASD_subject_metadata <- readRDS(paste0(ABIDE_data_path, "ABIDE_ASD_sample_metadata.Rds"))
ASD_subject_metadata <- readRDS(paste0(ASD_data_path, "ABIDE_ASD_sample_metadata.Rds"))
# Load ASD catch22 z-scored data
ASD_catch22_zscored <- readRDS(paste0(ASD_rdata_path,
"ABIDE_ASD_catch22_filtered_zscored.Rds")) %>%
filter(Noise_Proc == noise_proc)
# Get diagnosis proportions
ASD_sample_groups <- readRDS(paste0(ASD_rdata_path,
sprintf("ABIDE_ASD_samples_with_univariate_%s_and_pairwise_%s_filtered.Rds",
univariate_feature_set,
pairwise_feature_set))) %>%
left_join(., ASD_subject_metadata) %>%
distinct(Sample_ID, Diagnosis)
ASD_combo_catch22_svm_res <- run_repeat_cv_linear_svm(
mvmt_list = seq(0.12, 0.5, by=0.02),
movement_data = ASD_movement_data,
catch22_data = ASD_catch22_zscored,
movement_var = "FD",
type = "Combo",
sample_groups = ASD_sample_groups
)
ASD_movement_data <- calculate_mean_displacement(movement_data_path = ASD_motion_path,
input_dataset_name = "ABIDE_ASD",
sample_metadata = ASD_subject_metadata)
ASD_motion_path <- paste0(ABIDE_data_path, "raw_data/movement_data/")
ASD_movement_data <- calculate_mean_displacement(movement_data_path = ASD_motion_path,
input_dataset_name = "ABIDE_ASD",
sample_metadata = ASD_subject_metadata)
ASD_combo_catch22_svm_res <- run_repeat_cv_linear_svm(
mvmt_list = seq(0.12, 0.5, by=0.02),
movement_data = ASD_movement_data,
catch22_data = ASD_catch22_zscored,
movement_var = "FD",
type = "Combo",
sample_groups = ASD_sample_groups
)
ASD_combo_catch22_svm_res <- run_repeat_cv_linear_svm(
mvmt_list = seq(0.12, 0.5, by=0.02),
movement_data = ASD_movement_data,
catch22_data = ASD_catch22_zscored,
movement_var = "mean_displacement",
type = "Combo",
sample_groups = ASD_sample_groups
)
ASD_combo_catch22_svm_res <- run_repeat_cv_linear_svm(
mvmt_list = c(seq(0,0.5, by=0.005),
seq(0.5, 5, by=0.25)),
movement_data = ASD_movement_data,
catch22_data = ASD_catch22_zscored,
movement_var = "mean_displacement",
type = "Combo",
sample_groups = ASD_sample_groups
)
mvmt_list = c(seq(0,0.5, by=0.005),
seq(0.5, 5, by=0.25))
movement_data = ASD_movement_data
catch22_data = ASD_catch22_zscored
movement_var = "mean_displacement"
type = "Combo"
sample_groups = ASD_sample_groups
movement_threshold=0.05
movement_data_thresh <- movement_data %>%
mutate(movement_var = get(movement_var)) %>%
filter(movement_var <= movement_threshold)
catch22_data_thresh <- subset(catch22_data,
Sample_ID %in% movement_data_thresh$Sample_ID)
catch22_data = ASD_catch22_zscored
noise_proc <- "FC1000"
ASD_catch22_zscored <- readRDS(paste0(ASD_rdata_path,
"ABIDE_ASD_catch22_filtered_zscored.Rds")) %>%
filter(Noise_Proc == noise_proc)
# Get diagnosis proportions
ASD_sample_groups <- readRDS(paste0(ASD_rdata_path,
sprintf("ABIDE_ASD_samples_with_univariate_%s_and_pairwise_%s_filtered.Rds",
univariate_feature_set,
pairwise_feature_set))) %>%
left_join(., ASD_subject_metadata) %>%
distinct(Sample_ID, Diagnosis)
# Run SVM with various FD threshold cutoffs using univariate combo catch22
ASD_combo_catch22_svm_res <- run_repeat_cv_linear_svm(
mvmt_list = c(seq(0,0.5, by=0.005),
seq(0.5, 5, by=0.25)),
movement_data = ASD_movement_data,
catch22_data = ASD_catch22_zscored,
movement_var = "mean_displacement",
type = "Combo",
sample_groups = ASD_sample_groups
)
movement_data = ASD_movement_data
catch22_data = ASD_catch22_zscored
catch22_data_thresh <- subset(catch22_data,
Sample_ID %in% movement_data_thresh$Sample_ID)
# Define sample weights for inverse probability weighting
sample_wts <- as.list(1/prop.table(table(movement_data_thresh$Diagnosis)))
type_label = "catch22 Combo"
catch22_data_thresh %>%
unite("Combo", c("Brain_Region", "names"), sep="_", remove=F) %>%
dplyr::ungroup() %>%
left_join(., sample_groups)
catch22_data_thresh %>%
unite("Combo", c("Brain_Region", "names"), sep="_", remove=F) %>%
dplyr::ungroup() %>%
left_join(., sample_groups) %>%
dplyr::select(Sample_ID, Diagnosis, Combo, values) %>%
distinct(.keep_all = T) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = Combo,
values_from
= values)
data_for_SVM <- catch22_data_thresh %>%
unite("Combo", c("Brain_Region", "names"), sep="_", remove=F) %>%
dplyr::ungroup() %>%
left_join(., sample_groups) %>%
dplyr::select(Sample_ID, Diagnosis, Combo, values) %>%
distinct(.keep_all = T) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = Combo,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
SVM_results <- 1:nrepeats %>%
purrr::map_df( ~ k_fold_CV_linear_SVM(input_data = data_for_SVM,
k = num_k_folds,
svm_kernel = svm_kernel,
sample_wts = sample_wts,
shuffle_labels = F,
out_of_sample_only = T)%>%
dplyr::mutate(repeat_number = .x,
movement_threshold = movement_threshold))
df_list <- list.append(df_list, SVM_results)
do.call(plyr::rbind.fill, df_list)  %>%
group_by(movement_threshold, repeat_number) %>%
summarise(balanced_accuracy = caret::confusionMatrix(data = Predicted_Diagnosis,
reference = Actual_Diagnosis)$byClass[["Balanced Accuracy"]]) %>%
group_by(movement_threshold) %>%
summarise(meanbacc = 100*mean(balanced_accuracy),
sdbacc = 100*sd(balanced_accuracy)) %>%
mutate(Method = type_label)
ASD_combo_catch22_svm_res <- run_repeat_cv_linear_svm(
mvmt_list = c(seq(0,0.5, by=0.005),
seq(0.5, 5, by=0.25)),
movement_data = ASD_movement_data,
catch22_data = ASD_catch22_zscored,
movement_var = "mean_displacement",
type = "Combo",
sample_groups = ASD_sample_groups
)
run_repeat_cv_linear_svm <- function(mvmt_list = seq(0.12, 0.5, by=0.02),
movement_data,
movement_var = "FD",
sample_groups,
catch22_data,
type = "Brain Region",
input_region = "") {
# Iterate over each threshold
df_list <- list()
# Iterate over thresholds from 0 to 1 at intervals of 0.05
for (movement_threshold in mvmt_list) {
# Data thresholded by FD
movement_data_thresh <- movement_data %>%
mutate(movement_var = get(movement_var)) %>%
filter(movement_var <= movement_threshold)
catch22_data_thresh <- subset(catch22_data,
Sample_ID %in% movement_data_thresh$Sample_ID)
# Define sample weights for inverse probability weighting
sample_wts <- as.list(1/prop.table(table(movement_data_thresh$Diagnosis)))
if (type=="Brain Region") {
# Prep data for SVM
data_for_SVM <- catch22_data_thresh %>%
filter(Brain_Region == input_region) %>%
dplyr::ungroup() %>%
left_join(., sample_groups) %>%
dplyr::select(Sample_ID, Diagnosis, names, values) %>%
distinct(.keep_all = T) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = names,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
type_label = input_region
} else if (type=="Combo") {
type_label = "catch22 Combo"
# Prep data for SVM
data_for_SVM <- catch22_data_thresh %>%
unite("Combo", c("Brain_Region", "names"), sep="_", remove=F) %>%
dplyr::ungroup() %>%
left_join(., sample_groups) %>%
dplyr::select(Sample_ID, Diagnosis, Combo, values) %>%
distinct(.keep_all = T) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = Combo,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
} else if (type=="Movement Only") {
type_label = "Movement Only"
data_for_SVM <- movement_data_thresh %>%
dplyr::select(Sample_ID, Diagnosis, movement_var)
}
# Run linear SVM
if (nrow(data_for_SVM) > 0) {
tryCatch({
SVM_results <- 1:nrepeats %>%
purrr::map_df( ~ k_fold_CV_linear_SVM(input_data = data_for_SVM,
k = num_k_folds,
svm_kernel = svm_kernel,
sample_wts = sample_wts,
shuffle_labels = F,
out_of_sample_only = T)%>%
dplyr::mutate(repeat_number = .x,
movement_threshold = movement_threshold))
df_list <- list.append(df_list, SVM_results)
}, error = function(e) {
})
}
}
SVM_res <- do.call(plyr::rbind.fill, df_list)  %>%
group_by(movement_threshold, repeat_number) %>%
summarise(balanced_accuracy = caret::confusionMatrix(data = Predicted_Diagnosis,
reference = Actual_Diagnosis)$byClass[["Balanced Accuracy"]]) %>%
group_by(movement_threshold) %>%
summarise(meanbacc = 100*mean(balanced_accuracy),
sdbacc = 100*sd(balanced_accuracy)) %>%
mutate(Method = type_label)
}
ASD_combo_catch22_svm_res <- run_repeat_cv_linear_svm(
mvmt_list = c(seq(0,0.5, by=0.005),
seq(0.5, 5, by=0.25)),
movement_data = ASD_movement_data,
catch22_data = ASD_catch22_zscored,
movement_var = "mean_displacement",
type = "Combo",
sample_groups = ASD_sample_groups
)
ASD_combo_catch22_svm_res <- run_repeat_cv_linear_svm(
mvmt_list = c(seq(0.005,0.5, by=0.01),
seq(0.5, 5, by=0.25)),
movement_data = ASD_movement_data,
catch22_data = ASD_catch22_zscored,
movement_var = "mean_displacement",
type = "Combo",
sample_groups = ASD_sample_groups
)
ASD_combo_catch22_svm_res <- run_repeat_cv_linear_svm(
mvmt_list = seq(0.05, 0.6, by=0.01),
movement_data = ASD_movement_data,
catch22_data = ASD_catch22_zscored,
movement_var = "mean_displacement",
type = "Combo",
sample_groups = ASD_sample_groups
)
ASD_combo_catch22_svm_res <- run_repeat_cv_linear_svm(
mvmt_list = seq(0.05, 0.6, by=0.03),
movement_data = ASD_movement_data,
catch22_data = ASD_catch22_zscored,
movement_var = "mean_displacement",
type = "Combo",
sample_groups = ASD_sample_groups
)
ASD_mvmt_svm_res <- run_repeat_cv_linear_svm(
mvmt_list = seq(0.05, 0.6, by=0.05),
movement_data = ASD_movement_data,
catch22_data = ASD_catch22_zscored,
movement_var = "FD",
type = "Movement Only",
sample_groups = ASD_sample_groups
)
ASD_mvmt_svm_res <- run_repeat_cv_linear_svm(
mvmt_list = seq(0.05, 0.6, by=0.05),
movement_data = ASD_movement_data,
catch22_data = ASD_catch22_zscored,
movement_var = "mean_displacement",
type = "Movement Only",
sample_groups = ASD_sample_groups
)
View(ASD_mvmt_svm_res)
