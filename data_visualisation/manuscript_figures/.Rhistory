for (movement_threshold in mvmt_list) {
# Data thresholded by FD
movement_data_thresh <- movement_data %>%
mutate(movement_var = get(movement_var)) %>%
filter(movement_var <= movement_threshold)
catch22_data_thresh <- subset(catch22_data,
Sample_ID %in% movement_data_thresh$Sample_ID)
# Define sample weights for inverse probability weighting
sample_wts <- as.list(1/prop.table(table(movement_data_thresh$Diagnosis)))
if (type=="Brain Region") {
# Prep data for SVM
data_for_SVM <- catch22_data_thresh %>%
filter(Brain_Region == input_region) %>%
dplyr::ungroup() %>%
left_join(., sample_groups) %>%
dplyr::select(Sample_ID, Diagnosis, names, values) %>%
distinct(.keep_all = T) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = names,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
type_label = input_region
} else if (type=="Combo") {
type_label = "catch22 Combo"
# Prep data for SVM
data_for_SVM <- catch22_data_thresh %>%
unite("Combo", c("Brain_Region", "names"), sep="_", remove=F) %>%
dplyr::ungroup() %>%
left_join(., sample_groups) %>%
dplyr::select(Sample_ID, Diagnosis, Combo, values) %>%
distinct(.keep_all = T) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = Combo,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
} else if (type=="Movement Only") {
type_label = "Movement Only"
data_for_SVM <- movement_data_thresh %>%
dplyr::select(Sample_ID, Diagnosis, movement_var)
}
# Run linear SVM
if (nrow(data_for_SVM) > 0) {
tryCatch({
SVM_results <- 1:nrepeats %>%
purrr::map_df( ~ k_fold_CV_linear_SVM(input_data = data_for_SVM,
k = num_k_folds,
svm_kernel = svm_kernel,
sample_wts = sample_wts,
shuffle_labels = F,
out_of_sample_only = T)%>%
dplyr::mutate(repeat_number = .x,
movement_threshold = movement_threshold))
df_list <- list.append(df_list, SVM_results)
}, error = function(e) {
})
}
}
SVM_res <- do.call(plyr::rbind.fill, df_list)  %>%
group_by(movement_threshold, repeat_number) %>%
summarise(balanced_accuracy = caret::confusionMatrix(data = Predicted_Diagnosis,
reference = Actual_Diagnosis)$byClass[["Balanced Accuracy"]]) %>%
group_by(movement_threshold) %>%
summarise(meanbacc = 100*mean(balanced_accuracy),
sdbacc = 100*sd(balanced_accuracy)) %>%
mutate(Method = type_label)
}
# Define constants for UCLA Schizophrenia
top_region <- "ctx-rh-postcentral"
noise_proc <- "AROMA+2P+GMR"
# Load SCZ catch22 z-scored data
SCZ_catch22_zscored <- readRDS(paste0(SCZ_rdata_path,
"UCLA_Schizophrenia_catch22_filtered_zscored.Rds")) %>%
filter(Noise_Proc == noise_proc)
# Get diagnosis proportions
SCZ_sample_groups <- readRDS(paste0(SCZ_rdata_path,
sprintf("UCLA_Schizophrenia_samples_with_univariate_%s_and_pairwise_%s_filtered.Rds",
univariate_feature_set,
pairwise_feature_set))) %>%
left_join(., SCZ_subject_metadata) %>%
distinct(Sample_ID, Diagnosis)
univariate_feature_set="ctach22"
pairwise_feature_set="pyspi14"
# Load SCZ catch22 z-scored data
SCZ_catch22_zscored <- readRDS(paste0(SCZ_rdata_path,
"UCLA_Schizophrenia_catch22_filtered_zscored.Rds")) %>%
filter(Noise_Proc == noise_proc)
# Get diagnosis proportions
SCZ_sample_groups <- readRDS(paste0(SCZ_rdata_path,
sprintf("UCLA_Schizophrenia_samples_with_univariate_%s_and_pairwise_%s_filtered.Rds",
univariate_feature_set,
pairwise_feature_set))) %>%
left_join(., SCZ_subject_metadata) %>%
distinct(Sample_ID, Diagnosis)
# Load SCZ catch22 z-scored data
SCZ_catch22_zscored <- readRDS(paste0(SCZ_rdata_path,
"UCLA_Schizophrenia_catch22_filtered_zscored.Rds")) %>%
filter(Noise_Proc == noise_proc)
# Get diagnosis proportions
SCZ_sample_groups <- readRDS(paste0(SCZ_rdata_path,
sprintf("UCLA_Schizophrenia_samples_with_univariate_%s_and_pairwise_%s_filtered.Rds",
univariate_feature_set,
pairwise_feature_set))) %>%
left_join(., SCZ_subject_metadata) %>%
distinct(Sample_ID, Diagnosis)
univariate_feature_set="catch22"
SCZ_catch22_zscored <- readRDS(paste0(SCZ_rdata_path,
"UCLA_Schizophrenia_catch22_filtered_zscored.Rds")) %>%
filter(Noise_Proc == noise_proc)
# Get diagnosis proportions
SCZ_sample_groups <- readRDS(paste0(SCZ_rdata_path,
sprintf("UCLA_Schizophrenia_samples_with_univariate_%s_and_pairwise_%s_filtered.Rds",
univariate_feature_set,
pairwise_feature_set))) %>%
left_join(., SCZ_subject_metadata) %>%
distinct(Sample_ID, Diagnosis)
SCZ_catch22_zscored <- readRDS(paste0(SCZ_rdata_path,
"UCLA_Schizophrenia_catch22_filtered_zscored.Rds")) %>%
filter(Noise_Proc == noise_proc)
# Get diagnosis proportions
SCZ_sample_groups <- readRDS(paste0(SCZ_rdata_path,
sprintf("UCLA_Schizophrenia_samples_with_univariate_%s_and_pairwise_%s_filtered.Rds",
univariate_feature_set,
pairwise_feature_set))) %>%
left_join(., SCZ_subject_metadata) %>%
distinct(Sample_ID, Diagnosis)
SCZ_seq_list <- c(seq(0.12, 5, 0.02), max(SCZ_movement_data$Power))
ASD_seq_list <- c(seq(0,0.1, by=0.005),
0.25, 0.5, 1, 5, 10,
max(ASD_movement_data$Power))
SCZ_seq_list <- c(seq(0.12, 5, 0.02), max(SCZ_movement_data$Power))
ASD_seq_list <- c(seq(0,0.1, by=0.005),
0.25, 0.5, 1, 5, 10,
max(ASD_movement_data$Power))
# Run SVM with various FD threshold cutoffs using univariate combo catch22
SCZ_combo_catch22_svm_res <- run_repeat_cv_linear_svm(
mvmt_list = SCZ_seq_list,
movement_data = SCZ_movement_data,
catch22_data = SCZ_catch22_zscored,
movement_var = "Power",
type = "Combo",
sample_groups = SCZ_sample_groups
)
SCZ_catch22_zscored <- readRDS(paste0(SCZ_rdata_path,
"UCLA_Schizophrenia_catch22_filtered_zscored.Rds")) %>%
filter(Noise_Proc == "AROMA+2P+GMR")
SCZ_catch22_zscored <- readRDS(paste0(SCZ_rdata_path,
"UCLA_Schizophrenia_catch22_filtered_zscored.Rds"))
SCZ_catch22_zscored <- readRDS(paste0(SCZ_rdata_path,
"UCLA_Schizophrenia_catch22_filtered_zscored.Rds"))
SCZ_catch22_zscored <- readRDS(paste0(SCZ_rdata_path,
"UCLA_Schizophrenia_catch22_filtered_zscored.Rds")) %>%
filter(Noise_Proc == "AROMA+2P+GMR")
SCZ_combo_catch22_svm_res <- run_repeat_cv_linear_svm(
mvmt_list = SCZ_seq_list,
movement_data = SCZ_movement_data,
catch22_data = SCZ_catch22_zscored,
movement_var = "Power",
type = "Combo",
sample_groups = SCZ_sample_groups
)
SCZ_combo_catch22_svm_res <- run_repeat_cv_linear_svm(
mvmt_list = SCZ_seq_list,
movement_data = SCZ_movement_data,
catch22_data = SCZ_catch22_zscored,
movement_var = "Power",
type = "Combo",
sample_groups = SCZ_sample_groups
)
SCZ_seq_list <- c(seq(0.12, 5, by=0.02), max(SCZ_movement_data$Power))
SCZ_combo_catch22_svm_res <- run_repeat_cv_linear_svm(
mvmt_list = SCZ_seq_list,
movement_data = SCZ_movement_data,
catch22_data = SCZ_catch22_zscored,
movement_var = "Power",
type = "Combo",
sample_groups = SCZ_sample_groups
)
mvmt_list = SCZ_seq_list
movement_data = SCZ_movement_data
catch22_data = SCZ_catch22_zscored
movement_var = "Power"
type = "Combo"
sample_groups = SCZ_sample_groups
# Iterate over each threshold
df_list <- list()
# Iterate over thresholds from 0 to 1 at intervals of 0.05
for (movement_threshold in mvmt_list) {
# Data thresholded by FD
movement_data_thresh <- movement_data %>%
mutate(movement_var = get(movement_var)) %>%
filter(movement_var <= movement_threshold)
catch22_data_thresh <- subset(catch22_data,
Sample_ID %in% movement_data_thresh$Sample_ID)
# Define sample weights for inverse probability weighting
sample_wts <- as.list(1/prop.table(table(movement_data_thresh$Diagnosis)))
if (type=="Brain Region") {
# Prep data for SVM
data_for_SVM <- catch22_data_thresh %>%
filter(Brain_Region == input_region) %>%
dplyr::ungroup() %>%
left_join(., sample_groups) %>%
dplyr::select(Sample_ID, Diagnosis, names, values) %>%
distinct(.keep_all = T) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = names,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
type_label = input_region
} else if (type=="Combo") {
type_label = "catch22 Combo"
# Prep data for SVM
data_for_SVM <- catch22_data_thresh %>%
unite("Combo", c("Brain_Region", "names"), sep="_", remove=F) %>%
dplyr::ungroup() %>%
left_join(., sample_groups) %>%
dplyr::select(Sample_ID, Diagnosis, Combo, values) %>%
distinct(.keep_all = T) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = Combo,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
} else if (type=="Movement Only") {
type_label = "Movement Only"
data_for_SVM <- movement_data_thresh %>%
dplyr::select(Sample_ID, Diagnosis, movement_var)
}
# Run linear SVM
if (nrow(data_for_SVM) > 0) {
tryCatch({
SVM_results <- 1:nrepeats %>%
purrr::map_df( ~ k_fold_CV_linear_SVM(input_data = data_for_SVM,
k = num_k_folds,
svm_kernel = svm_kernel,
sample_wts = sample_wts,
shuffle_labels = F,
out_of_sample_only = T)%>%
dplyr::mutate(repeat_number = .x,
movement_threshold = movement_threshold))
df_list <- list.append(df_list, SVM_results)
}, error = function(e) {
})
}
}
for (movement_threshold in mvmt_list) {
# Data thresholded by FD
movement_data_thresh <- movement_data %>%
mutate(movement_var = get(movement_var)) %>%
filter(movement_var <= movement_threshold)
catch22_data_thresh <- subset(catch22_data,
Sample_ID %in% movement_data_thresh$Sample_ID)
# Define sample weights for inverse probability weighting
sample_wts <- as.list(1/prop.table(table(movement_data_thresh$Diagnosis)))
if (type=="Brain Region") {
# Prep data for SVM
data_for_SVM <- catch22_data_thresh %>%
filter(Brain_Region == input_region) %>%
dplyr::ungroup() %>%
left_join(., sample_groups) %>%
dplyr::select(Sample_ID, Diagnosis, names, values) %>%
distinct(.keep_all = T) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = names,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
type_label = input_region
} else if (type=="Combo") {
type_label = "catch22 Combo"
# Prep data for SVM
data_for_SVM <- catch22_data_thresh %>%
unite("Combo", c("Brain_Region", "names"), sep="_", remove=F) %>%
dplyr::ungroup() %>%
left_join(., sample_groups) %>%
dplyr::select(Sample_ID, Diagnosis, Combo, values) %>%
distinct(.keep_all = T) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = Combo,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
} else if (type=="Movement Only") {
type_label = "Movement Only"
data_for_SVM <- movement_data_thresh %>%
dplyr::select(Sample_ID, Diagnosis, movement_var)
}
# Run linear SVM
if (nrow(data_for_SVM) > 0) {
tryCatch({
SVM_results <- 1:nrepeats %>%
purrr::map_df( ~ k_fold_CV_linear_SVM(input_data = data_for_SVM,
k = num_k_folds,
svm_kernel = svm_kernel,
sample_wts = sample_wts,
shuffle_labels = F,
out_of_sample_only = T)%>%
dplyr::mutate(repeat_number = .x,
movement_threshold = movement_threshold))
df_list <<- list.append(df_list, SVM_results)
}, error = function(e) {
})
}
}
movement_threshold = 0.2
movement_data_thresh <- movement_data %>%
mutate(movement_var = get(movement_var)) %>%
filter(movement_var <= movement_threshold)
catch22_data_thresh <- subset(catch22_data,
Sample_ID %in% movement_data_thresh$Sample_ID)
# Define sample weights for inverse probability weighting
sample_wts <- as.list(1/prop.table(table(movement_data_thresh$Diagnosis)))
if (type=="Brain Region") {
# Prep data for SVM
data_for_SVM <- catch22_data_thresh %>%
filter(Brain_Region == input_region) %>%
dplyr::ungroup() %>%
left_join(., sample_groups) %>%
dplyr::select(Sample_ID, Diagnosis, names, values) %>%
distinct(.keep_all = T) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = names,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
type_label = input_region
} else if (type=="Combo") {
type_label = "catch22 Combo"
# Prep data for SVM
data_for_SVM <- catch22_data_thresh %>%
unite("Combo", c("Brain_Region", "names"), sep="_", remove=F) %>%
dplyr::ungroup() %>%
left_join(., sample_groups) %>%
dplyr::select(Sample_ID, Diagnosis, Combo, values) %>%
distinct(.keep_all = T) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = Combo,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
} else if (type=="Movement Only") {
type_label = "Movement Only"
data_for_SVM <- movement_data_thresh %>%
dplyr::select(Sample_ID, Diagnosis, movement_var)
}
SVM_results <- 1:nrepeats %>%
purrr::map_df( ~ k_fold_CV_linear_SVM(input_data = data_for_SVM,
k = num_k_folds,
svm_kernel = svm_kernel,
sample_wts = sample_wts,
shuffle_labels = F,
out_of_sample_only = T)%>%
dplyr::mutate(repeat_number = .x,
movement_threshold = movement_threshold))
repeats=`0`
nrepeats=10
SVM_results <- 1:nrepeats %>%
purrr::map_df( ~ k_fold_CV_linear_SVM(input_data = data_for_SVM,
k = num_k_folds,
svm_kernel = svm_kernel,
sample_wts = sample_wts,
shuffle_labels = F,
out_of_sample_only = T)%>%
dplyr::mutate(repeat_number = .x,
movement_threshold = movement_threshold))
num_k_folds=10
SVM_results <- 1:nrepeats %>%
purrr::map_df( ~ k_fold_CV_linear_SVM(input_data = data_for_SVM,
k = num_k_folds,
svm_kernel = svm_kernel,
sample_wts = sample_wts,
shuffle_labels = F,
out_of_sample_only = T)%>%
dplyr::mutate(repeat_number = .x,
movement_threshold = movement_threshold))
svm_kernel="linear"
SVM_results <- 1:nrepeats %>%
purrr::map_df( ~ k_fold_CV_linear_SVM(input_data = data_for_SVM,
k = num_k_folds,
svm_kernel = svm_kernel,
sample_wts = sample_wts,
shuffle_labels = F,
out_of_sample_only = T)%>%
dplyr::mutate(repeat_number = .x,
movement_threshold = movement_threshold))
run_repeat_cv_linear_svm <- function(mvmt_list = seq(0.12, 0.5, by=0.02),
movement_data,
movement_var = "Power",
sample_groups,
catch22_data,
type = "Brain Region",
input_region = "") {
# Iterate over each threshold
df_list <- list()
# Iterate over thresholds from 0 to 1 at intervals of 0.05
for (movement_threshold in mvmt_list) {
# Data thresholded by FD
movement_data_thresh <- movement_data %>%
mutate(movement_var = get(movement_var)) %>%
filter(movement_var <= movement_threshold)
catch22_data_thresh <- subset(catch22_data,
Sample_ID %in% movement_data_thresh$Sample_ID)
# Define sample weights for inverse probability weighting
sample_wts <- as.list(1/prop.table(table(movement_data_thresh$Diagnosis)))
if (type=="Brain Region") {
# Prep data for SVM
data_for_SVM <- catch22_data_thresh %>%
filter(Brain_Region == input_region) %>%
dplyr::ungroup() %>%
left_join(., sample_groups) %>%
dplyr::select(Sample_ID, Diagnosis, names, values) %>%
distinct(.keep_all = T) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = names,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
type_label = input_region
} else if (type=="Combo") {
type_label = "catch22 Combo"
# Prep data for SVM
data_for_SVM <- catch22_data_thresh %>%
unite("Combo", c("Brain_Region", "names"), sep="_", remove=F) %>%
dplyr::ungroup() %>%
left_join(., sample_groups) %>%
dplyr::select(Sample_ID, Diagnosis, Combo, values) %>%
distinct(.keep_all = T) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = Combo,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
} else if (type=="Movement Only") {
type_label = "Movement Only"
data_for_SVM <- movement_data_thresh %>%
dplyr::select(Sample_ID, Diagnosis, movement_var)
}
# Run linear SVM
if (nrow(data_for_SVM) > 0) {
tryCatch({
SVM_results <- 1:nrepeats %>%
purrr::map_df( ~ k_fold_CV_linear_SVM(input_data = data_for_SVM,
k = num_k_folds,
svm_kernel = svm_kernel,
sample_wts = sample_wts,
shuffle_labels = F,
out_of_sample_only = T)%>%
dplyr::mutate(repeat_number = .x,
movement_threshold = movement_threshold))
df_list <<- list.append(df_list, SVM_results)
}, error = function(e) {
})
}
}
SVM_res <- do.call(plyr::rbind.fill, df_list)  %>%
group_by(movement_threshold, repeat_number) %>%
summarise(balanced_accuracy = caret::confusionMatrix(data = Predicted_Diagnosis,
reference = Actual_Diagnosis)$byClass[["Balanced Accuracy"]]) %>%
group_by(movement_threshold) %>%
summarise(meanbacc = 100*mean(balanced_accuracy),
sdbacc = 100*sd(balanced_accuracy)) %>%
mutate(Method = type_label)
}
SCZ_combo_catch22_svm_res <- run_repeat_cv_linear_svm(
mvmt_list = SCZ_seq_list,
movement_data = SCZ_movement_data,
catch22_data = SCZ_catch22_zscored,
movement_var = "Power",
type = "Combo",
sample_groups = SCZ_sample_groups
)
# Run SVM with various FD threshold cutoffs using univariate combo catch22
SCZ_combo_catch22_svm_res <- run_repeat_cv_linear_svm(
mvmt_list = SCZ_seq_list,
movement_data = SCZ_movement_data,
catch22_data = SCZ_catch22_zscored,
movement_var = "Power",
type = "Combo",
sample_groups = SCZ_sample_groups
)
