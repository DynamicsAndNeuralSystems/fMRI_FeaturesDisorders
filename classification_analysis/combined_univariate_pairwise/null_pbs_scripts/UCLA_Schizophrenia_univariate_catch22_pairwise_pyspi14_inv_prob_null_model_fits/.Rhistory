univariate_feature_set <- "catch22"
pairwise_feature_set <- "pyspi14"
github_dir <- "/headnode1/abry4213/github/"
email <- "abry4213@uni.sydney.edu.au"
num_k_folds <- 10
null_iter_number <- 1
num_perms_for_iter <- 5
svm_kernel <- "linear"
SPI_directionality_file <- paste0(github_dir, "fMRI_FeaturesDisorders/classification_analysis/pairwise_analysis/SPI_Direction_Info.csv")
dataset_ID <- "UCLA_Schizophrenia"
sample_metadata_file <- "UCLA_Schizophrenia_sample_metadata.Rds"
data_path <- "/headnode1/abry4213/data/UCLA_Schizophrenia/"
noise_proc <- "AROMA+2P+GMR"
output_data_dir <- paste0(rdata_path, dataset_ID, "_univariate_",
univariate_feature_set, "_pairwise_",
pairwise_feature_set, "_inv_prob_null_model_fits/")
rdata_path <- paste0(data_path, "processed_data/Rdata/")
output_data_dir <- paste0(rdata_path, dataset_ID, "_univariate_",
univariate_feature_set, "_pairwise_",
pairwise_feature_set, "_inv_prob_null_model_fits/")
univariate_data_file <- paste0(rdata_path, sprintf("%s_%s_filtered_zscored.Rds",
dataset_ID, univariate_feature_set))
pairwise_data_file <- paste0(rdata_path, sprintf("%s_%s_filtered_zscored.Rds",
dataset_ID, pairwise_feature_set)
if (is.null(rdata_path)) {
if (is.null(rdata_path)) {
rdata_path <- paste0(data_path, "processed_data/Rdata/")
}
# Load sample metadata
sample_metadata <- readRDS(paste0(data_path, sample_metadata_file))
# Source linear SVM functions
source(paste0(github_dir, "fMRI_FeaturesDisorders/helper_functions/classification/Linear_SVM.R"))
icesTAF::mkdir(output_data_dir)
cat("\nNumber of k-folds:", num_k_folds, "\n")
cat("\nNum permutations per iteration:", num_perms_for_iter, "\n")
pairwise_data_file <- paste0(rdata_path, sprintf("%s_%s_filtered_zscored.Rds",
dataset_ID, pairwise_feature_set))
univariate_feature_data <- readRDS(univariate_data_file) %>%
dplyr::filter(Noise_Proc == noise_proc)
pairwise_feature_data <- readRDS(pairwise_data_file) %>%
dplyr::filter(Noise_Proc == noise_proc)
SPI_directionality <- read.csv(SPI_directionality_file)
# Run null iteration
null_out <- 1:num_perms_for_iter %>%
purrr::map_df( ~ run_combined_uni_pairwise_cv_svm_by_input_var(dataset_ID = dataset_ID,
data_path = data_path,
rdata_path = rdata_path,
univariate_data = univariate_feature_data,
univariate_feature_set = univariate_feature_set,
pairwise_data = pairwise_feature_data,
pairwise_feature_set = pairwise_feature_set,
SPI_directionality = SPI_directionality,
num_k_folds = 10,
svm_kernel = svm_kernel,
noise_proc = noise_proc,
out_of_sample_only = TRUE,
use_inv_prob_weighting = use_inv_prob_weighting,
shuffle_labels = T) %>%
# Keep track of which null iteration this is
mutate(Null_Iter_Number = .x + (.x * (as.numeric(null_iter_number) - 1))))
use_inv_prob_weighting=T
univariate_feature_data <- readRDS(univariate_data_file) %>%
dplyr::filter(Noise_Proc == noise_proc)
pairwise_feature_data <- readRDS(pairwise_data_file) %>%
dplyr::filter(Noise_Proc == noise_proc)
SPI_directionality <- read.csv(SPI_directionality_file)
# Run null iteration
null_out <- 1:num_perms_for_iter %>%
purrr::map_df( ~ run_combined_uni_pairwise_cv_svm_by_input_var(dataset_ID = dataset_ID,
data_path = data_path,
rdata_path = rdata_path,
univariate_data = univariate_feature_data,
univariate_feature_set = univariate_feature_set,
pairwise_data = pairwise_feature_data,
pairwise_feature_set = pairwise_feature_set,
SPI_directionality = SPI_directionality,
num_k_folds = 10,
svm_kernel = svm_kernel,
noise_proc = noise_proc,
out_of_sample_only = TRUE,
use_inv_prob_weighting = use_inv_prob_weighting,
shuffle_labels = T) %>%
# Keep track of which null iteration this is
mutate(Null_Iter_Number = .x + (.x * (as.numeric(null_iter_number) - 1))))
null_out <- 1:num_perms_for_iter %>%
purrr::map_df( ~ run_combined_uni_pairwise_cv_svm_by_input_var(dataset_ID = dataset_ID,
data_path = data_path,
rdata_path = rdata_path,
univariate_data = univariate_feature_data,
univariate_feature_set = univariate_feature_set,
pairwise_data = pairwise_feature_data,
pairwise_feature_set = pairwise_feature_set,
SPI_directionality = SPI_directionality,
num_k_folds = 10,
svm_kernel = svm_kernel,
noise_proc = noise_proc,
out_of_sample_only = TRUE,
use_inv_prob_weighting = use_inv_prob_weighting,
shuffle_labels = TRUE) %>%
# Keep track of which null iteration this is
mutate(Null_Iter_Number = .x + (.x * (as.numeric(null_iter_number) - 1))))
# Source linear SVM functions
source(paste0(github_dir, "fMRI_FeaturesDisorders/helper_functions/classification/Linear_SVM.R"))
null_out <- 1:num_perms_for_iter %>%
purrr::map_df( ~ run_combined_uni_pairwise_cv_svm_by_input_var(dataset_ID = dataset_ID,
data_path = data_path,
rdata_path = rdata_path,
univariate_data = univariate_feature_data,
univariate_feature_set = univariate_feature_set,
pairwise_data = pairwise_feature_data,
pairwise_feature_set = pairwise_feature_set,
SPI_directionality = SPI_directionality,
num_k_folds = 10,
svm_kernel = svm_kernel,
noise_proc = noise_proc,
out_of_sample_only = TRUE,
use_inv_prob_weighting = use_inv_prob_weighting,
shuffle_labels = TRUE) %>%
# Keep track of which null iteration this is
mutate(Null_Iter_Number = .x + (.x * (as.numeric(null_iter_number) - 1))))
# Save null results to RDS
saveRDS(null_out, file=sprintf("%s/univariate_%s_pairwise_%s_CV_linear_SVM_%s_null_model_fit_iter_%s.Rds",
output_data_dir, univariate_feature_set,
pairwise_feature_set, weighting_name, null_iter_number))
weighting_name="inv_prob"
saveRDS(null_out, file=sprintf("%s/univariate_%s_pairwise_%s_CV_linear_SVM_%s_null_model_fit_iter_%s.Rds",
output_data_dir, univariate_feature_set,
pairwise_feature_set, weighting_name, null_iter_number))
