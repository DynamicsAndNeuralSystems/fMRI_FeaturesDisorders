univariate_feature_set <- "catch22"
pairwise_feature_set <- "pyspi14"
github_dir <- "/headnode1/abry4213/github/"
data_path <- "/headnode1/abry4213/data/UCLA_Schizophrenia/"
dataset_ID <- "UCLA_Schizophrenia"
sample_metadata_file <- "UCLA_Schizophrenia_sample_metadata.Rds"
noise_procs <- "AROMA+2P;AROMA+2P+GMR;AROMA+2P+DiCER"
noise_proc_for_null <- "AROMA+2P+GMR"
rdata_path <- paste0(data_path, "processed_data/Rdata/")
plot_dir <- paste0(data_path, "plots/")
run_number=""
icesTAF::mkdir(plot_dir)
# Set the seed
set.seed(127)
# Load tidyverse
library(tidyverse)
helper_script_dir = paste0(github_dir, "fMRI_FeaturesDisorders/helper_functions/classification/")
source(paste0(helper_script_dir, "Linear_SVM.R"))
source(paste0(helper_script_dir, "Null_distributions.R"))
# Load sample metadata
sample_metadata <- readRDS(paste0(data_path, sample_metadata_file))
subjects_to_use <- readRDS(paste0(rdata_path, sprintf("%s_samples_with_univariate_%s_and_pairwise_%s_filtered.Rds",
dataset_ID,
univariate_feature_set,
pairwise_feature_set)))
if (!file.exists(paste0(rdata_path, dataset_ID, "_samples_per_10_folds_10_repeats.Rds"))) {
sample_folds <- list()
for (i in 1:10) {
# Make folds
k = 10
samples_with_diagnosis <- subjects_to_use %>%
left_join(., sample_metadata)
sample_folds_i <- caret::createFolds(samples_with_diagnosis$Diagnosis, k = k, list = TRUE, returnTrain = FALSE)
sample_folds[[i]] <- sample_folds_i
}
# Save RDS file
saveRDS(sample_folds, paste0(rdata_path, dataset_ID, "_samples_per_10_folds_10_repeats.Rds"))
} else {
sample_folds <- readRDS(paste0(rdata_path, dataset_ID, "_samples_per_10_folds_10_repeats.Rds"))
}
grouping_param_df <- data.frame(grouping_type = c("ROI", "Feature", "Combo"),
grouping_var = c("Brain_Region", "Feature", "Combo"),
SVM_feature_var = c("Feature", "Brain_Region", "Combo"))
# Use a linear kernel
kernel = "linear"
weighting_name <- "inv_prob"
use_inv_prob_weighting <- TRUE
i=1
grouping_type = grouping_param_df$grouping_type[i]
grouping_var = grouping_param_df$grouping_var[i]
SVM_feature_var = grouping_param_df$SVM_feature_var[i]
group_wise_SVM_CV_weighting <- readRDS(paste0(rdata_path,
sprintf("%s_wise_CV_linear_SVM_%s_%s.Rds",
grouping_type,
univariate_feature_set,
weighting_name)))
group_wise_SVM_CV_weighting %>%
group_by(grouping_var, Noise_Proc, Sample_Type, fold_number, repeat_number) %>%
summarise(accuracy = sum(Prediction_Correct) / n(),
balanced_accuracy = caret::confusionMatrix(data = Predicted_Diagnosis,
reference = Actual_Diagnosis)$byClass[["Balanced Accuracy"]])
group_wise_SVM_balanced_accuracy <- group_wise_SVM_CV_weighting %>%
group_by(grouping_var, Noise_Proc, Sample_Type, fold_number, repeat_number) %>%
summarise(accuracy = sum(Prediction_Correct) / n(),
balanced_accuracy = caret::confusionMatrix(data = Predicted_Diagnosis,
reference = Actual_Diagnosis)$byClass[["Balanced Accuracy"]])
saveRDS(group_wise_SVM_balanced_accuracy, file=paste0(rdata_path, sprintf("%s_wise_CV_linear_SVM_%s_%s_balacc.Rds",
grouping_type,
univariate_feature_set,
weighting_name)))
group_wise_SVM_balanced_accuracy_across_repeats <- group_wise_SVM_balanced_accuracy %>%
group_by(grouping_var, Noise_Proc, Sample_Type) %>%
summarise(mean_accuracy = mean(accuracy, na.rm=T),
mean_balanced_accuracy = mean(balanced_accuracy, na.rm=T)) %>%
dplyr::rename("accuracy" = "mean_accuracy",
"balanced_accuracy" = "mean_balanced_accuracy")
saveRDS(group_wise_SVM_balanced_accuracy_across_repeats, file=paste0(rdata_path, sprintf("%s_wise_CV_linear_SVM_%s_%s_balacc_across_repeats.Rds",
grouping_type,
univariate_feature_set,
weighting_name)))
univariate_feature_set <- "catch22"
pairwise_feature_set <- "pyspi14"
github_dir <- "/headnode1/abry4213/github/"
email <- "abry4213@uni.sydney.edu.au"
num_k_folds <- 10
null_iter_number <- 1
num_perms_for_iter <- 5
svm_kernel <- "linear"
weighting_name <- "inv_prob"
SPI_directionality_file <- paste0(github_dir, "fMRI_FeaturesDisorders/classification_analysis/pairwise_analysis/SPI_Direction_Info.csv")
dataset_ID <- "UCLA_Schizophrenia"
sample_metadata_file <- "UCLA_Schizophrenia_sample_metadata.Rds"
data_path <- "/headnode1/abry4213/data/UCLA_Schizophrenia/"
noise_proc <- "AROMA+2P+GMR"
use_inv_prob_weighting = TRUE
rdata_path <- paste0(data_path, "processed_data/Rdata/")
output_data_dir <- paste0(rdata_path, dataset_ID, "_univariate_",
univariate_feature_set, "_pairwise_",
pairwise_feature_set, "_inv_prob_null_model_fits/")
univariate_data_file <- paste0(rdata_path, sprintf("%s_%s_filtered_zscored.Rds",
dataset_ID, univariate_feature_set))
pairwise_data_file <- paste0(rdata_path, sprintf("%s_%s_filtered_zscored.Rds",
dataset_ID, pairwise_feature_set))
null_out <- 1:num_perms_for_iter  %>%
purrr::map_df( ~ run_univariate_cv_svm_by_input_var(data_path = data_path,
rdata_path = rdata_path,
sample_metadata = sample_metadata,
dataset_ID = dataset_ID,
svm_kernel = svm_kernel,
pairwise_feature_set = pairwise_feature_set,
univariate_feature_set = univariate_feature_set,
grouping_var = grouping_var,
svm_feature_var = svm_feature_var,
noise_procs = noise_proc,
num_k_folds = num_k_folds,
out_of_sample_only = TRUE,
use_inv_prob_weighting = use_inv_prob_weighting,
shuffle_labels = T) %>%
# Keep track of which null iteration this is
mutate(Null_Iter_Number = .x + (.x * (as.numeric(null_iter_number) - 1))))
svm_feature_var="Feature"
null_out <- 1:num_perms_for_iter  %>%
purrr::map_df( ~ run_univariate_cv_svm_by_input_var(data_path = data_path,
rdata_path = rdata_path,
sample_metadata = sample_metadata,
dataset_ID = dataset_ID,
svm_kernel = svm_kernel,
pairwise_feature_set = pairwise_feature_set,
univariate_feature_set = univariate_feature_set,
grouping_var = grouping_var,
svm_feature_var = svm_feature_var,
noise_procs = noise_proc,
num_k_folds = num_k_folds,
out_of_sample_only = TRUE,
use_inv_prob_weighting = use_inv_prob_weighting,
shuffle_labels = T) %>%
# Keep track of which null iteration this is
mutate(Null_Iter_Number = .x + (.x * (as.numeric(null_iter_number) - 1))))
null_out %>%
group_by(grouping_var, Noise_Proc, Sample_Type, fold_number, Null_Iter_Number) %>%
# First find accuracy and balanced accuracy by fold
summarise(accuracy = sum(Prediction_Correct) / n(),
balanced_accuracy = caret::confusionMatrix(data = Predicted_Diagnosis,
reference = Actual_Diagnosis)$byClass[["Balanced Accuracy"]])
null_out %>%
group_by(grouping_var, Noise_Proc, Sample_Type, fold_number, Null_Iter_Number) %>%
# First find accuracy and balanced accuracy by fold
summarise(accuracy = sum(Prediction_Correct) / n(),
balanced_accuracy = caret::confusionMatrix(data = Predicted_Diagnosis,
reference = Actual_Diagnosis)$byClass[["Balanced Accuracy"]]) %>%
# Then take average acc/balacc across all ten folds per iteration
group_by(grouping_var, Noise_Proc, Sample_Type, Null_Iter_Number) %>%
summarise(mean_accuracy = mean(accuracy, na.rm=T),
mean_balanced_accuracy = mean(balanced_accuracy, na.rm=T)) %>%
dplyr::rename("accuracy" = "mean_accuracy",
"balanced_accuracy" = "mean_balanced_accuracy")
