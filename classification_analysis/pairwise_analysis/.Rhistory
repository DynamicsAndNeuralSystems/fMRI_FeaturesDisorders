install.packages("ggseg")
install.packages("sf")
install.packages("plotly")
install.packages("reticulate")
install.packages("ungeviz")
install.packages("devtools")
install.packages("remotes")
install.packages("cowplto")
install.packages("cowplot")
install.packages("patchwork")
install.packages("reshape2")
install.packages("reshape2")
univariate_feature_set <- "catch22"
pairwise_feature_set <- "pyspi14"
github_dir <- "/headnode1/abry4213/github/"
data_path <- "/headnode1/abry4213/data/UCLA_Schizophrenia/"
dataset_ID <- "UCLA_Schizophrenia"
sample_metadata_file <- "UCLA_Schizophrenia_sample_metadata.Rds"
noise_proc_for_null <- "AROMA+2P+GMR"
rdata_path <- paste0(data_path, "processed_data/Rdata/")
plot_dir <- paste0(data_path, "plots/")
icesTAF::mkdir(plot_dir)
# Set the seed
set.seed(127)
# Load tidyverse
library(tidyverse)
helper_script_dir = paste0(github_dir, "fMRI_FeaturesDisorders/helper_functions/classification/")
source(paste0(helper_script_dir, "Linear_SVM.R"))
source(paste0(helper_script_dir, "Null_distributions.R"))
# Load sample metadata
sample_metadata <- readRDS(paste0(data_path, sample_metadata_file))
pyspi_data_file <- sprintf("%s/%s_%s_filtered_zscored.Rds",
rdata_path, dataset_ID, pairwise_feature_set)
pyspi_data <- readRDS(pyspi_data_file) %>%
dplyr::filter(Noise_Proc %in% noise_proc_for_null)
SPI_directionality <- read.csv(paste0(github_dir, "fMRI_FeaturesDisorders/pairwise_analysis/SPI_Direction_Info.csv"))
# Load sample metadata
sample_metadata <- readRDS(paste0(data_path, sample_metadata_file))
length(unique(pyspi_data$names))
sample_folds <- readRDS(paste0(rdata_path, dataset_ID, "_samples_per_10_folds.Rds"))
weighting_param_df <- data.frame(name = c("inv_prob"),
use_inv_prob_weighting = c(TRUE))
grouping_param_df <- data.frame(grouping_var = c("SPI"),
SVM_feature_var = c("region_pair"))
grouping_var = grouping_param_df$grouping_var[i]
i=1
j=1
grouping_var = grouping_param_df$grouping_var[i]
SVM_feature_var = grouping_param_df$SVM_feature_var[i]
weighting_name <- weighting_param_df$name[j]
use_inv_prob_weighting <- weighting_param_df$use_inv_prob_weighting[j]
group_wise_SVM_CV_weighting <- run_pairwise_cv_svm_by_input_var(pairwise_data = pyspi_data,
data_path = data_path,
rdata_path = rdata_path,
sample_metadata = sample_metadata,
SPI_directionality = SPI_directionality,
svm_kernel = kernel,
num_k_folds = 10,
flds = sample_folds,
grouping_var = grouping_var,
svm_feature_var = SVM_feature_var,
noise_proc = noise_proc_for_null,
out_of_sample_only = TRUE,
use_inv_prob_weighting = use_inv_prob_weighting,
shuffle_labels = FALSE)
pairwise_data = pyspi_data
svm_kernel = kernel
flds = sample_folds
num_k_folds = 10
svm_feature_var = SVM_feature_var
noise_proc = noise_proc_for_null
out_of_sample_only = TRUE
shuffle_labels = FALSE
sample_groups <- readRDS(paste0(rdata_path, sprintf("%s_samples_with_univariate_%s_and_pairwise_%s_filtered.Rds",
dataset_ID,
univariate_feature_set,
pairwise_feature_set))) %>%
left_join(., sample_metadata) %>%
dplyr::select(Sample_ID, Diagnosis)
# Convert to sample weights based on inverse of probability
sample_wts <- as.list(1/prop.table(table(sample_groups$Diagnosis)))
# Initialize results list for SVM
class_res_list <- list()
if ("names" %in% colnames(pairwise_data)) {
pairwise_data <- pairwise_data %>%
dplyr::rename("SPI" = "names")
}
if (svm_feature_var == "region_pair") {
svm_feature_var_name = svm_feature_var
grouping_var_name = "SPI"
grouping_var_vector <- unique(pairwise_data$SPI)
# Filter by directionality
pairwise_data <- pairwise_data %>%
dplyr::rename("group_SPI" = "SPI") %>%
group_by(group_SPI) %>%
mutate(Direction = SPI_directionality %>%
filter(SPI == unique(group_SPI)) %>%
distinct(Direction) %>%
pull(Direction)) %>%
dplyr::rename("SPI" = "group_SPI") %>%
mutate(region_pair = case_when(Direction == "Undirected" ~ ifelse(brain_region_1 < brain_region_2,
paste0(brain_region_1, "_", brain_region_2),
paste0(brain_region_2, "_", brain_region_1)),
Direction == "Directed" ~ paste0(brain_region_1, "_", brain_region_2))) %>%
dplyr::select(-brain_region_1, -brain_region_2)  %>%
distinct(Sample_ID, SPI, region_pair, .keep_all = T)
} else if (svm_feature_var == "SPI") {
# Don't want to filter by directionality
pairwise_data <- pairwise_data %>%
rowwise() %>%
tidyr::unite("region_pair", c(brain_region_1, brain_region_2), sep="_") %>%
distinct(Sample_ID, SPI, region_pair, .keep_all = T)
svm_feature_var_name = svm_feature_var
grouping_var_name = "region_pair"
grouping_var_vector <- unique(pairwise_data$region_pair)
} else {
svm_feature_var_name = "Combo"
grouping_var_name = "Group_Var"
# Filter by directionality
pyspi_data <- pyspi_data %>%
# Special cases
filter(SPI != "sgc_nonparametric_mean_fs-1_fmin-0_fmax-0-5",
!(Sample_ID == "sub-10171" & SPI == "di_gaussian")) %>%
rowwise() %>%
tidyr::unite("region_pair", c(brain_region_1, brain_region_2), sep="_") %>%
distinct(Sample_ID, SPI, region_pair, .keep_all = T) %>%
group_by(SPI, region_pair) %>%
filter(!all(is.na(values))) %>%
dplyr::select(where(function(x) any(!is.na(x)))) %>%
unite("Combo", c("region_pair", "SPI"), sep="_", remove=F)
grouping_var_vector <- c("All")
}
for (group_var in unique(grouping_var_vector)) {
if (grouping_var == "Combo") {
data_for_SVM <- pairwise_data %>%
# Impute missing data with the mean
group_by(Diagnosis, Combo) %>%
mutate(values = ifelse(is.na(values), mean(values, na.rm=T), values)) %>%
dplyr::select(Sample_ID, Diagnosis, Combo, values) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = Combo,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
} else {
# Otherwise iterate over each separate group
data_for_SVM <- subset(pairwise_data, get(grouping_var_name) == group_var) %>%
dplyr::ungroup() %>%
dplyr::select(Sample_ID, Diagnosis, svm_feature_var_name, values) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = svm_feature_var_name,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
}
if (nrow(data_for_SVM) > 0) {
# Run k-fold linear SVM
tryCatch({SVM_results <- k_fold_CV_linear_SVM(input_data = data_for_SVM,
flds = flds,
k = num_k_folds,
svm_kernel = svm_kernel,
sample_wts = sample_wts,
shuffle_labels = shuffle_labels,
out_of_sample_only = out_of_sample_only) %>%
dplyr::mutate(grouping_var = group_var,
pairwise_feature_set = pairwise_feature_set,
use_inv_prob_weighting = use_inv_prob_weighting,
Noise_Proc = noise_proc)
# Append results to list
class_res_list <- list.append(class_res_list, SVM_results)
}, error = function(e) {
cat("Error for", group_var, "\n")
message(e)
})
} else {
cat("\nNo observations available for", group_var, "after filtering.\n")
}
}
data_for_SVM <- subset(pairwise_data, get(grouping_var_name) == group_var) %>%
dplyr::ungroup() %>%
dplyr::select(Sample_ID, Diagnosis, svm_feature_var_name, values) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = svm_feature_var_name,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
group_var="cov_EmpiricalCovariance"
data_for_SVM <- subset(pairwise_data, get(grouping_var_name) == group_var) %>%
dplyr::ungroup() %>%
dplyr::select(Sample_ID, Diagnosis, svm_feature_var_name, values) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = svm_feature_var_name,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
use_inv_prob_weighting=FALSE
SVM_results <- k_fold_CV_linear_SVM(input_data = data_for_SVM,
flds = flds,
k = num_k_folds,
svm_kernel = svm_kernel,
sample_wts = sample_wts,
shuffle_labels = shuffle_labels,
out_of_sample_only = out_of_sample_only) %>%
dplyr::mutate(grouping_var = group_var,
pairwise_feature_set = pairwise_feature_set,
use_inv_prob_weighting = use_inv_prob_weighting,
Noise_Proc = noise_proc)
svm_kernel="linear"
kernel="linear"
SVM_results <- k_fold_CV_linear_SVM(input_data = data_for_SVM,
flds = flds,
k = num_k_folds,
svm_kernel = svm_kernel,
sample_wts = sample_wts,
shuffle_labels = shuffle_labels,
out_of_sample_only = out_of_sample_only) %>%
dplyr::mutate(grouping_var = group_var,
pairwise_feature_set = pairwise_feature_set,
use_inv_prob_weighting = use_inv_prob_weighting,
Noise_Proc = noise_proc)
group_var="sgc_nonparametric_mean_fs-1_fmin-0_fmax-0-5"
data_for_SVM <- subset(pairwise_data, get(grouping_var_name) == group_var) %>%
dplyr::ungroup() %>%
dplyr::select(Sample_ID, Diagnosis, svm_feature_var_name, values) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = svm_feature_var_name,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
data_for_SVM <- subset(pairwise_data, get(grouping_var_name) == group_var) %>%
dplyr::ungroup() %>%
dplyr::select(Sample_ID, Diagnosis, svm_feature_var_name, values) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = svm_feature_var_name,
values_from
= values)
data_for_SVM[1:4,1:4]
data_for_SVM %>% select(Sample_ID, `ctx-lh-caudalanteriorcingulate_ctx-lh-bankssts`)
data_for_SVM %>% select(Sample_ID, `ctx-lh-caudalanteriorcingulate_ctx-lh-bankssts`) %>% filter(!is.na(`ctx-lh-caudalanteriorcingulate_ctx-lh-bankssts`))
subset(pairwise_data, get(grouping_var_name) == group_var) %>%
dplyr::ungroup() %>%
dplyr::select(Sample_ID, Diagnosis, svm_feature_var_name, values) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = svm_feature_var_name,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x))))
subset(pairwise_data, get(grouping_var_name) == group_var) %>%
dplyr::ungroup() %>%
dplyr::select(Sample_ID, Diagnosis, svm_feature_var_name, values) %>%
filter(is.na(values))
subset(pairwise_data, get(grouping_var_name) == group_var) %>%
dplyr::ungroup() %>%
dplyr::select(Sample_ID, Diagnosis, svm_feature_var_name, values) %>%
filter(is.na(values)) %>%
distinct(Sample_ID)
subset(pairwise_data, get(grouping_var_name) == group_var) %>%
dplyr::ungroup() %>%
dplyr::select(Sample_ID, Diagnosis, svm_feature_var_name, values) %>%
filter(is.na(values)) %>%
distinct(svm_feature_var_name)
subset(pairwise_data, get(grouping_var_name) == group_var) %>%
dplyr::ungroup() %>%
dplyr::select(Sample_ID, Diagnosis, svm_feature_var_name, values) %>%
filter(is.na(values))
subset(pairwise_data, get(grouping_var_name) == group_var) %>%
dplyr::ungroup() %>%
dplyr::select(Sample_ID, Diagnosis, svm_feature_var_name, values) %>%
filter(is.na(values)) %>%
distinct(region_pair)
data_for_SVM <- subset(pairwise_data, get(grouping_var_name) == group_var) %>%
dplyr::ungroup() %>%
dplyr::select(Sample_ID, Diagnosis, svm_feature_var_name, values)
data_for_SVM <- subset(pairwise_data, get(grouping_var_name) == group_var) %>%
dplyr::ungroup() %>%
dplyr::select(Sample_ID, Diagnosis, svm_feature_var_name, values) %>%
filter(is.na(values))
data_for_SVM <- subset(pairwise_data, get(grouping_var_name) == group_var) %>%
dplyr::ungroup() %>%
dplyr::select(Sample_ID, Diagnosis, svm_feature_var_name, values) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = svm_feature_var_name,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
