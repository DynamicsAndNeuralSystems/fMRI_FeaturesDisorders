univariate_feature_set <- "catch22"
pairwise_feature_set <- "pyspi14"
github_dir <- "/headnode1/abry4213/github/"
data_path <- "/headnode1/abry4213/data/UCLA_Schizophrenia/"
dataset_ID <- "UCLA_Schizophrenia"
sample_metadata_file <- "UCLA_Schizophrenia_sample_metadata.Rds"
noise_proc_for_null <- "AROMA+2P+GMR"
rdata_path <- paste0(data_path, "processed_data/Rdata/")
plot_dir <- paste0(data_path, "plots/")
icesTAF::mkdir(plot_dir)
# Set the seed
set.seed(127)
# Load tidyverse
library(tidyverse)
helper_script_dir = paste0(github_dir, "fMRI_FeaturesDisorders/helper_functions/classification/")
source(paste0(helper_script_dir, "Linear_SVM.R"))
source(paste0(helper_script_dir, "Null_distributions.R"))
pyspi_data_file <- sprintf("%s/%s_%s_filtered_zscored.Rds",
rdata_path, dataset_ID, pairwise_feature_set)
pyspi_data <- readRDS(pyspi_data_file) %>%
dplyr::filter(Noise_Proc %in% noise_proc_for_null)
SPI_directionality_file <- paste0(github_dir, "fMRI_FeaturesDisorders/classification_analysis/pairwise_analysis/SPI_Direction_Info.csv")
SPI_directionality <- read.csv(SPI_directionality_file)
# Load sample metadata
sample_metadata <- readRDS(paste0(data_path, sample_metadata_file))
subjects_to_use <- readRDS(paste0(rdata_path, sprintf("%s_samples_with_univariate_%s_and_pairwise_%s_filtered.Rds",
dataset_ID,
univariate_feature_set,
pairwise_feature_set)))
pyspi_data <- pyspi_data %>%
semi_join(., subjects_to_use)
sample_folds <- readRDS(paste0(rdata_path, dataset_ID, "_samples_per_10_folds_10_repeats.Rds"))
# Use a linear kernel
kernel = "linear"
weighting_name <- "inv_prob"
use_inv_prob_weighting <- TRUE
grouping_param_df <- data.frame(grouping_var = c("SPI"),
SVM_feature_var = c("region_pair"))
i=1
grouping_var = grouping_param_df$grouping_var[i]
SVM_feature_var = grouping_param_df$SVM_feature_var[i]
tryCatch({
group_wise_SVM_CV_weighting_list <- list()
for (idx in 1:length(sample_folds)) {
tryCatch({
repeat_res <- run_pairwise_cv_svm_by_input_var(pairwise_data = pyspi_data,
dataset_ID = dataset_ID,
data_path = data_path,
rdata_path = rdata_path,
sample_metadata = sample_metadata,
SPI_directionality = SPI_directionality,
svm_kernel = kernel,
num_k_folds = 10,
flds = sample_folds[[idx]],
repeat_number = idx,
grouping_var = grouping_var,
svm_feature_var = SVM_feature_var,
noise_proc = noise_proc_for_null,
out_of_sample_only = TRUE,
use_inv_prob_weighting = use_inv_prob_weighting,
shuffle_labels = FALSE)
group_wise_SVM_CV_weighting_list <- list.append(group_wise_SVM_CV_weighting_list, repeat_res)
}, error = function(e) {
cat("Error for repeat number:", idx, "\n")
message(e)
})
}
group_wise_SVM_CV_weighting <- do.call(plyr::rbind.fill, group_wise_SVM_CV_weighting_list)
saveRDS(group_wise_SVM_CV_weighting, file=paste0(rdata_path,
sprintf("%s_wise_CV_linear_SVM_%s_%s.Rds",
grouping_var,
pairwise_feature_set,
weighting_name)))
}, error = function(e) {
cat("Could not run linear SVM for", grouping_var, pairwise_feature_set, ".\n")
message(e)
})
group_wise_SVM_balanced_accuracy <- group_wise_SVM_CV_weighting %>%
group_by(grouping_var, Noise_Proc, Sample_Type, fold_number, repeat_number) %>%
summarise(accuracy = sum(Prediction_Correct) / n(),
balanced_accuracy = caret::confusionMatrix(data = Predicted_Diagnosis,
reference = Actual_Diagnosis)$byClass[["Balanced Accuracy"]])
saveRDS(group_wise_SVM_balanced_accuracy, file=paste0(rdata_path, sprintf("%s_wise_CV_linear_SVM_%s_%s_balacc.Rds",
grouping_var,
univariate_feature_set,
weighting_name)))
group_wise_SVM_balanced_accuracy_across_repeats <- group_wise_SVM_balanced_accuracy %>%
group_by(grouping_var, Noise_Proc, Sample_Type) %>%
summarise(mean_accuracy = mean(accuracy, na.rm=T),
mean_balanced_accuracy = mean(balanced_accuracy, na.rm=T)) %>%
dplyr::rename("accuracy" = "mean_accuracy",
"balanced_accuracy" = "mean_balanced_accuracy")
saveRDS(group_wise_SVM_balanced_accuracy_across_repeats, file=paste0(rdata_path, sprintf("%s_wise_CV_linear_SVM_%s_%s_balacc_across_repeats.Rds",
grouping_var,
pairwise_feature_set,
weighting_name)))
univariate_feature_set <- "catch22"
pairwise_feature_set <- "pyspi14"
github_dir <- "/headnode1/abry4213/github/"
data_path <- "/headnode1/abry4213/data/UCLA_Schizophrenia/"
dataset_ID <- "UCLA_Schizophrenia"
sample_metadata_file <- "UCLA_Schizophrenia_sample_metadata.Rds"
noise_proc_for_null <- "AROMA+2P+GMR"
rdata_path <- paste0(data_path, "processed_data/Rdata/")
plot_dir <- paste0(data_path, "plots/")
icesTAF::mkdir(plot_dir)
# Set the seed
set.seed(127)
# Load tidyverse
library(tidyverse)
helper_script_dir = paste0(github_dir, "fMRI_FeaturesDisorders/helper_functions/classification/")
source(paste0(helper_script_dir, "Linear_SVM.R"))
source(paste0(helper_script_dir, "Null_distributions.R"))
pyspi_data_file <- sprintf("%s/%s_%s_filtered_zscored.Rds",
rdata_path, dataset_ID, pairwise_feature_set)
pyspi_data <- readRDS(pyspi_data_file) %>%
dplyr::filter(Noise_Proc %in% noise_proc_for_null)
SPI_directionality_file <- paste0(github_dir, "fMRI_FeaturesDisorders/classification_analysis/pairwise_analysis/SPI_Direction_Info.csv")
SPI_directionality <- read.csv(SPI_directionality_file)
# Load sample metadata
sample_metadata <- readRDS(paste0(data_path, sample_metadata_file))
subjects_to_use <- readRDS(paste0(rdata_path, sprintf("%s_samples_with_univariate_%s_and_pairwise_%s_filtered.Rds",
dataset_ID,
univariate_feature_set,
pairwise_feature_set)))
pyspi_data <- pyspi_data %>%
semi_join(., subjects_to_use)
if (!file.exists(paste0(rdata_path, dataset_ID, "_samples_per_10_folds_10_repeats.Rds"))) {
sample_folds <- list()
for (i in 1:10) {
# Make folds
k = 10
samples_with_diagnosis <- subjects_to_use %>%
left_join(., sample_metadata)
sample_folds_i <- caret::createFolds(samples_with_diagnosis$Diagnosis, k = k, list = TRUE, returnTrain = FALSE)
sample_folds[[i]] <- sample_folds_i
}
# Save RDS file
saveRDS(sample_folds, paste0(rdata_path, dataset_ID, "_samples_per_10_folds_10_repeats.Rds"))
} else {
sample_folds <- readRDS(paste0(rdata_path, dataset_ID, "_samples_per_10_folds_10_repeats.Rds"))
}
# Use a linear kernel
kernel = "linear"
weighting_name <- "inv_prob"
use_inv_prob_weighting <- TRUE
grouping_param_df <- data.frame(grouping_var = c("SPI"),
SVM_feature_var = c("region_pair"))
i=1
idx=1
grouping_var = grouping_param_df$grouping_var[i]
SVM_feature_var = grouping_param_df$SVM_feature_var[i]
group_wise_SVM_CV_weighting_list <- list()
repeat_res <- run_pairwise_cv_svm_by_input_var(pairwise_data = pyspi_data,
dataset_ID = dataset_ID,
data_path = data_path,
rdata_path = rdata_path,
sample_metadata = sample_metadata,
SPI_directionality = SPI_directionality,
svm_kernel = kernel,
num_k_folds = 10,
flds = sample_folds[[idx]],
repeat_number = idx,
grouping_var = grouping_var,
svm_feature_var = SVM_feature_var,
noise_proc = noise_proc_for_null,
out_of_sample_only = TRUE,
use_inv_prob_weighting = use_inv_prob_weighting,
shuffle_labels = FALSE)
group_wise_SVM_CV_weighting_list <- list.append(group_wise_SVM_CV_weighting_list, repeat_res)
for (idx in 2:length(sample_folds)) {
tryCatch({
repeat_res <- run_pairwise_cv_svm_by_input_var(pairwise_data = pyspi_data,
dataset_ID = dataset_ID,
data_path = data_path,
rdata_path = rdata_path,
sample_metadata = sample_metadata,
SPI_directionality = SPI_directionality,
svm_kernel = kernel,
num_k_folds = 10,
flds = sample_folds[[idx]],
repeat_number = idx,
grouping_var = grouping_var,
svm_feature_var = SVM_feature_var,
noise_proc = noise_proc_for_null,
out_of_sample_only = TRUE,
use_inv_prob_weighting = use_inv_prob_weighting,
shuffle_labels = FALSE)
group_wise_SVM_CV_weighting_list <- list.append(group_wise_SVM_CV_weighting_list, repeat_res)
}, error = function(e) {
cat("Error for repeat number:", idx, "\n")
message(e)
})
}
group_wise_SVM_CV_weighting <- do.call(plyr::rbind.fill, group_wise_SVM_CV_weighting_list)
paste0(rdata_path,
sprintf("%s_wise_CV_linear_SVM_%s_%s.Rds",
grouping_var,
pairwise_feature_set,
weighting_name))
saveRDS(group_wise_SVM_CV_weighting, file=paste0(rdata_path,
sprintf("%s_wise_CV_linear_SVM_%s_%s.Rds",
grouping_var,
pairwise_feature_set,
weighting_name)))
group_wise_SVM_CV_weighting %>%
group_by(grouping_var, Noise_Proc, Sample_Type, fold_number, repeat_number) %>%
summarise(accuracy = sum(Prediction_Correct) / n(),
balanced_accuracy = caret::confusionMatrix(data = Predicted_Diagnosis,
reference = Actual_Diagnosis)$byClass[["Balanced Accuracy"]])
sprintf("%s_wise_CV_linear_SVM_%s_%s_balacc.Rds",
grouping_var,
univariate_feature_set,
weighting_name))
sprintf("%s_wise_CV_linear_SVM_%s_%s_balacc.Rds",
grouping_var,
univariate_feature_set,
weighting_name)
group_wise_SVM_balanced_accuracy <- group_wise_SVM_CV_weighting %>%
group_by(grouping_var, Noise_Proc, Sample_Type, fold_number, repeat_number) %>%
summarise(accuracy = sum(Prediction_Correct) / n(),
balanced_accuracy = caret::confusionMatrix(data = Predicted_Diagnosis,
reference = Actual_Diagnosis)$byClass[["Balanced Accuracy"]])
saveRDS(group_wise_SVM_balanced_accuracy, file=paste0(rdata_path, sprintf("%s_wise_CV_linear_SVM_%s_%s_balacc.Rds",
grouping_var,
univariate_feature_set,
weighting_name)))
group_wise_SVM_balanced_accuracy_across_repeats <- group_wise_SVM_balanced_accuracy %>%
group_by(grouping_var, Noise_Proc, Sample_Type) %>%
summarise(mean_accuracy = mean(accuracy, na.rm=T),
mean_balanced_accuracy = mean(balanced_accuracy, na.rm=T)) %>%
dplyr::rename("accuracy" = "mean_accuracy",
"balanced_accuracy" = "mean_balanced_accuracy")
saveRDS(group_wise_SVM_balanced_accuracy_across_repeats, file=paste0(rdata_path, sprintf("%s_wise_CV_linear_SVM_%s_%s_balacc_across_repeats.Rds",
grouping_var,
pairwise_feature_set,
weighting_name)))
saveRDS(group_wise_SVM_balanced_accuracy, file=paste0(rdata_path, sprintf("%s_wise_CV_linear_SVM_%s_%s_balacc.Rds",
grouping_var,
pairwise_feature_set,
weighting_name)))
