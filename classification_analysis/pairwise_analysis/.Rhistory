y=fold_number)) +
# Fill in tiles per fold/repeat
geom_tile(aes(fill=100*balanced_accuracy)) +
# Mean tiles
geom_tile(data=repeat_avg %>% filter(Metric=="mean"),
mapping=aes(fill=100*balanced_accuracy)) +
# Standard deviation tiles (gray)
geom_tile(data=repeat_avg %>% filter(Metric=="SD"), fill="gray70") +
ylab("Fold Number") +
xlab("Repeat Number") +
ggtitle("Balanced Accuracy across 10 Folds/Repeats\nfor Right Postcentral Gyrus") +
geom_text(data=repeat_avg, aes(label=label)) +
labs(fill="Balanced Accuracy %") +
theme(legend.position = "bottom",
plot.title = element_text(hjust=0.5),
legend.key.width = unit(2,"cm"))
ggsave(paste0(plot_path, "UCLA_Schizophrenia_Balanced_Accuracy_Fold_Repeat_Right_Postcentral.png"),
width=7, height=5, units="in", dpi=300, bg="white")
balanced_accuracy_across_folds %>%
filter(grouping_var == "ctx-rh-postcentral",
Noise_Proc == "AROMA+2P+GMR") %>%
mutate(repeat_number = as.factor(repeat_number),
fold_number = factor(fold_number, levels=rev(c(1:10, "Mean", "SD")))) %>%
ggplot(data=., mapping=aes(x=repeat_number,
y=fold_number)) +
# Fill in tiles per fold/repeat
geom_tile(aes(fill=100*balanced_accuracy)) +
# Mean tiles
geom_tile(data=repeat_avg %>% filter(Metric=="mean"),
mapping=aes(fill=100*balanced_accuracy)) +
# Standard deviation tiles (gray)
geom_tile(data=repeat_avg %>% filter(Metric=="SD"), fill="gray70") +
ylab("Fold Number") +
xlab("Repeat Number") +
ggtitle("Balanced Accuracy across 10 Folds/Repeats\nfor Right Postcentral Gyrus") +
geom_text(data=repeat_avg, aes(label=label)) +
labs(fill="Balanced Accuracy %") +
theme(legend.position = "bottom",
plot.title = element_text(hjust=0.5),
legend.key.width = unit(1.5,"cm"))
ggsave(paste0(plot_path, "UCLA_Schizophrenia_Balanced_Accuracy_Fold_Repeat_Right_Postcentral.png"),
width=7, height=5, units="in", dpi=300, bg="white")
univariate_feature_set <- "catch22"
pairwise_feature_set <- "pyspi14"
github_dir <- "/headnode1/abry4213/github/"
email <- "abry4213@uni.sydney.edu.au"
data_path <- "/headnode1/abry4213/data/UCLA_Schizophrenia/"
dataset_ID <- "UCLA_Schizophrenia"
sample_metadata_file <- "UCLA_Schizophrenia_sample_metadata.Rds"
noise_procs <- "AROMA+2P;AROMA+2P+GMR;AROMA+2P+DiCER"
noise_proc_for_null <- "AROMA+2P+GMR"
rdata_path <- paste0(data_path, "processed_data/Rdata/")
plot_dir <- paste0(data_path, "plots/")
icesTAF::mkdir(plot_dir)
# Set the seed
set.seed(127)
# Load tidyverse
library(tidyverse)
icesTAF::mkdir(plot_dir)
# Set the seed
set.seed(127)
# Load tidyverse
library(tidyverse)
helper_script_dir = paste0(github_dir, "fMRI_FeaturesDisorders/helper_functions/classification/")
source(paste0(helper_script_dir, "Linear_SVM.R"))
source(paste0(helper_script_dir, "Null_distributions.R"))
# Load sample metadata
sample_metadata <- readRDS(paste0(data_path, sample_metadata_file))
kernel = "linear"
noise_label = gsub("\\+", "_", noise_proc_for_null)
weighting_name="inv_prob"
grouping_param_df <- data.frame(grouping_var = "SPI",
SVM_feature_var = "region_pair")
i=1
grouping_var = grouping_param_df$grouping_var[i]
SVM_feature_var = grouping_param_df$SVM_feature_var[i]
run_number=
""
output_data_dir <- paste0(rdata_path, sprintf("%s_univariate_%s_pairwise_%s_%s_null_model_fits%s/",
dataset_ID,
univariate_feature_set,
pairwise_feature_set,
weighting_name,
run_number))
model_permutation_null_weighting <- list.files(output_data_dir, pattern="Rds") %>%
purrr::map_df(~ readRDS(paste0(output_data_dir, .x)))
univariate_feature_set <- "catch22"
pairwise_feature_set <- "pyspi14"
github_dir <- "/headnode1/abry4213/github/"
data_path <- "/headnode1/abry4213/data/ABIDE_ASD/"
sample_metadata_file <- "ABIDE_ASD_sample_metadata.Rds"
dataset_ID <- "ABIDE_ASD"
noise_proc_for_null <- "FC1000"
rdata_path <- paste0(data_path, "processed_data/Rdata/")
plot_dir <- paste0(data_path, "plots/")
helper_script_dir = paste0(github_dir, "fMRI_FeaturesDisorders/helper_functions/classification/")
source(paste0(helper_script_dir, "Linear_SVM.R"))
source(paste0(helper_script_dir, "Null_distributions.R"))
pyspi_data_file <- sprintf("%s/%s_%s_filtered_zscored.Rds",
rdata_path, dataset_ID, pairwise_feature_set)
pyspi_data <- readRDS(pyspi_data_file) %>%
dplyr::filter(Noise_Proc %in% noise_proc_for_null)
SPI_directionality_file <- paste0(github_dir, "fMRI_FeaturesDisorders/classification_analysis/pairwise_analysis/SPI_Direction_Info.csv")
SPI_directionality <- read.csv(SPI_directionality_file)
# Load sample metadata
sample_metadata <- readRDS(paste0(data_path, sample_metadata_file))
subjects_to_use <- readRDS(paste0(rdata_path, sprintf("%s_samples_with_univariate_%s_and_pairwise_%s_filtered.Rds",
dataset_ID,
univariate_feature_set,
pairwise_feature_set)))
pyspi_data <- pyspi_data %>%
semi_join(., subjects_to_use)
if (!file.exists(paste0(rdata_path, dataset_ID, "_samples_per_10_folds_10_repeats.Rds"))) {
sample_folds <- list()
for (i in 1:10) {
# Make folds
k = 10
samples_with_diagnosis <- subjects_to_use %>%
left_join(., sample_metadata)
sample_folds_i <- caret::createFolds(samples_with_diagnosis$Diagnosis, k = k, list = TRUE, returnTrain = FALSE)
sample_folds[[i]] <- sample_folds_i
}
# Save RDS file
saveRDS(sample_folds, paste0(rdata_path, dataset_ID, "_samples_per_10_folds_10_repeats.Rds"))
} else {
sample_folds <- readRDS(paste0(rdata_path, dataset_ID, "_samples_per_10_folds_10_repeats.Rds"))
}
kernel = "linear"
weighting_name <- "inv_prob"
use_inv_prob_weighting <- TRUE
grouping_param_df <- data.frame(grouping_var = c("SPI"),
SVM_feature_var = c("region_pair"))
i=1
grouping_var = grouping_param_df$grouping_var[i]
SVM_feature_var = grouping_param_df$SVM_feature_var[i]
group_wise_SVM_CV_weighting_list <- list()
for (idx in 1:length(sample_folds)) {
tryCatch({
repeat_res <- run_pairwise_cv_svm_by_input_var(pairwise_data = pyspi_data,
dataset_ID = dataset_ID,
data_path = data_path,
rdata_path = rdata_path,
sample_metadata = sample_metadata,
SPI_directionality = SPI_directionality,
svm_kernel = kernel,
num_k_folds = 10,
flds = sample_folds[[idx]],
repeat_number = idx,
grouping_var = grouping_var,
svm_feature_var = SVM_feature_var,
noise_proc = noise_proc_for_null,
out_of_sample_only = TRUE,
use_inv_prob_weighting = use_inv_prob_weighting,
shuffle_labels = FALSE)
group_wise_SVM_CV_weighting_list <- list.append(group_wise_SVM_CV_weighting_list, repeat_res)
}, error = function(e) {
cat("Error for repeat number:", idx, "\n")
message(e)
})
}
pairwise_data = pyspi_data
svm_kernel = kernel
num_k_folds = 10
idx=1
flds = sample_folds[[idx]]
repeat_number = idx
svm_feature_var = SVM_feature_var
noise_proc = noise_proc_for_null
out_of_sample_only = TRUE
shuffle_labels = FALSE
rdata_path <- paste0(data_path, "processed_data/Rdata/")
rdata_path
sample_groups <- readRDS(paste0(rdata_path, sprintf("%s_samples_with_univariate_%s_and_pairwise_%s_filtered.Rds",
dataset_ID,
univariate_feature_set,
pairwise_feature_set))) %>%
left_join(., sample_metadata) %>%
dplyr::select(Sample_ID, Diagnosis)
# Convert to sample weights based on inverse of probability
sample_wts <- as.list(1/prop.table(table(sample_groups$Diagnosis)))
# Initialize results list for SVM
class_res_list <- list()
if ("names" %in% colnames(pairwise_data)) {
pairwise_data <- pairwise_data %>%
dplyr::rename("SPI" = "names")
}
if (svm_feature_var == "region_pair") {
svm_feature_var_name = svm_feature_var
grouping_var_name = "SPI"
grouping_var_vector <- unique(pairwise_data$SPI)
# Filter by directionality
pairwise_data <- pairwise_data %>%
dplyr::rename("group_SPI" = "SPI") %>%
group_by(group_SPI) %>%
mutate(Direction = SPI_directionality %>%
filter(SPI == unique(group_SPI)) %>%
distinct(Direction) %>%
pull(Direction)) %>%
dplyr::rename("SPI" = "group_SPI") %>%
mutate(region_pair = case_when(Direction == "Undirected" ~ ifelse(brain_region_1 < brain_region_2,
paste0(brain_region_1, "_", brain_region_2),
paste0(brain_region_2, "_", brain_region_1)),
Direction == "Directed" ~ paste0(brain_region_1, "_", brain_region_2))) %>%
dplyr::select(-brain_region_1, -brain_region_2)  %>%
distinct(Sample_ID, SPI, region_pair, .keep_all = T)
} else if (svm_feature_var == "SPI") {
# Don't want to filter by directionality
pairwise_data <- pairwise_data %>%
rowwise() %>%
tidyr::unite("region_pair", c(brain_region_1, brain_region_2), sep="_") %>%
distinct(Sample_ID, SPI, region_pair, .keep_all = T)
svm_feature_var_name = svm_feature_var
grouping_var_name = "region_pair"
grouping_var_vector <- unique(pairwise_data$region_pair)
} else {
svm_feature_var_name = "Combo"
grouping_var_name = "Group_Var"
# Filter by directionality
pyspi_data <- pyspi_data %>%
# Special cases
filter(SPI != "sgc_nonparametric_mean_fs-1_fmin-0_fmax-0-5",
!(Sample_ID == "sub-10171" & SPI == "di_gaussian")) %>%
rowwise() %>%
tidyr::unite("region_pair", c(brain_region_1, brain_region_2), sep="_") %>%
distinct(Sample_ID, SPI, region_pair, .keep_all = T) %>%
group_by(SPI, region_pair) %>%
filter(!all(is.na(values))) %>%
dplyr::select(where(function(x) any(!is.na(x)))) %>%
unite("Combo", c("region_pair", "SPI"), sep="_", remove=F)
grouping_var_vector <- c("All")
}
for (group_var in unique(grouping_var_vector)) {
if (grouping_var == "Combo") {
data_for_SVM <- pairwise_data %>%
# Impute missing data with the mean
group_by(Diagnosis, Combo) %>%
mutate(values = ifelse(is.na(values), mean(values, na.rm=T), values)) %>%
dplyr::select(Sample_ID, Diagnosis, Combo, values) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = Combo,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
} else {
# Otherwise iterate over each separate group
data_for_SVM <- subset(pairwise_data, get(grouping_var_name) == group_var) %>%
dplyr::ungroup() %>%
dplyr::select(Sample_ID, Diagnosis, svm_feature_var_name, values) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = svm_feature_var_name,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
}
if (nrow(data_for_SVM) > 0) {
# Run k-fold linear SVM
tryCatch({SVM_results <- k_fold_CV_linear_SVM(input_data = data_for_SVM,
flds = flds,
k = num_k_folds,
svm_kernel = svm_kernel,
sample_wts = sample_wts,
shuffle_labels = shuffle_labels,
out_of_sample_only = out_of_sample_only) %>%
dplyr::mutate(grouping_var = group_var,
repeat_number = repeat_number,
pairwise_feature_set = pairwise_feature_set,
use_inv_prob_weighting = use_inv_prob_weighting,
Noise_Proc = noise_proc)
# Append results to list
class_res_list <- list.append(class_res_list, SVM_results)
}, error = function(e) {
cat("Error for", group_var, "\n")
message(e)
})
} else {
cat("\nNo observations available for", group_var, "after filtering.\n")
}
}
# Combine results from all regions into a dataframe
class_res_df <- do.call(plyr::rbind.fill, class_res_list)
unique(class_res_df$grouping_var)
group_wise_SVM_CV_weighting_list <- list()
for (idx in 1:length(sample_folds)) {
tryCatch({
repeat_res <- run_pairwise_cv_svm_by_input_var(pairwise_data = pyspi_data,
dataset_ID = dataset_ID,
data_path = data_path,
rdata_path = rdata_path,
sample_metadata = sample_metadata,
SPI_directionality = SPI_directionality,
svm_kernel = kernel,
num_k_folds = 10,
flds = sample_folds[[idx]],
repeat_number = idx,
grouping_var = grouping_var,
svm_feature_var = SVM_feature_var,
noise_proc = noise_proc_for_null,
out_of_sample_only = TRUE,
use_inv_prob_weighting = use_inv_prob_weighting,
shuffle_labels = FALSE)
group_wise_SVM_CV_weighting_list <- list.append(group_wise_SVM_CV_weighting_list, repeat_res)
}, error = function(e) {
cat("Error for repeat number:", idx, "\n")
message(e)
})
}
group_wise_SVM_CV_weighting <- do.call(plyr::rbind.fill, group_wise_SVM_CV_weighting_list)
saveRDS(group_wise_SVM_CV_weighting, file=paste0(rdata_path,
sprintf("%s_wise_CV_linear_SVM_%s_%s.Rds",
grouping_var,
pairwise_feature_set,
weighting_name)))
setwd("~/github/fMRI_FeaturesDisorders/classification_analysis/pairwise_analysis")
for (group_var in unique(grouping_var_vector)) {
if (grouping_var == "Combo") {
data_for_SVM <- pairwise_data %>%
# Impute missing data with the mean
group_by(Diagnosis, Combo) %>%
mutate(values = ifelse(is.na(values), mean(values, na.rm=T), values)) %>%
dplyr::select(Sample_ID, Diagnosis, Combo, values) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = Combo,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
} else {
# Otherwise iterate over each separate group
data_for_SVM <- subset(pairwise_data, get(grouping_var_name) == group_var) %>%
dplyr::ungroup() %>%
dplyr::select(Sample_ID, Diagnosis, svm_feature_var_name, values) %>%
tidyr::pivot_wider(id_cols = c(Sample_ID, Diagnosis),
names_from = svm_feature_var_name,
values_from
= values) %>%
# Drop columns that are all NA/NAN
dplyr::select(where(function(x) any(!is.na(x)))) %>%
# Drop rows with NA for one or more column
drop_na()
}
if (nrow(data_for_SVM) > 0) {
# Run k-fold linear SVM
tryCatch({SVM_results <- k_fold_CV_linear_SVM(input_data = data_for_SVM,
flds = flds,
k = num_k_folds,
svm_kernel = svm_kernel,
sample_wts = sample_wts,
shuffle_labels = shuffle_labels,
out_of_sample_only = out_of_sample_only) %>%
dplyr::mutate(grouping_var = group_var,
repeat_number = repeat_number,
pairwise_feature_set = pairwise_feature_set,
use_inv_prob_weighting = use_inv_prob_weighting,
Noise_Proc = noise_proc)
# Append results to list
class_res_list <- list.append(class_res_list, SVM_results)
}, error = function(e) {
cat("Error for", group_var, "\n")
message(e)
})
} else {
cat("\nNo observations available for", group_var, "after filtering.\n")
}
}
# Combine results from all regions into a dataframe
class_res_df <- do.call(plyr::rbind.fill, class_res_list)
group_wise_SVM_CV_weighting_list <- list()
for (idx in 1) {
#for (idx in 1:length(sample_folds)) {
tryCatch({
repeat_res <- run_pairwise_cv_svm_by_input_var(pairwise_data = pyspi_data,
dataset_ID = dataset_ID,
data_path = data_path,
rdata_path = rdata_path,
sample_metadata = sample_metadata,
SPI_directionality = SPI_directionality,
svm_kernel = kernel,
num_k_folds = 10,
flds = sample_folds[[idx]],
repeat_number = idx,
grouping_var = grouping_var,
svm_feature_var = SVM_feature_var,
noise_proc = noise_proc_for_null,
out_of_sample_only = TRUE,
use_inv_prob_weighting = use_inv_prob_weighting,
shuffle_labels = FALSE)
group_wise_SVM_CV_weighting_list <- list.append(group_wise_SVM_CV_weighting_list, repeat_res)
}, error = function(e) {
cat("Error for repeat number:", idx, "\n")
message(e)
})
}
group_wise_SVM_CV_weighting <- do.call(plyr::rbind.fill, group_wise_SVM_CV_weighting_list)
repeat_res <- run_pairwise_cv_svm_by_input_var(pairwise_data = pyspi_data,
dataset_ID = dataset_ID,
data_path = data_path,
rdata_path = rdata_path,
sample_metadata = sample_metadata,
SPI_directionality = SPI_directionality,
svm_kernel = kernel,
num_k_folds = 10,
flds = sample_folds[[idx]],
repeat_number = idx,
grouping_var = grouping_var,
svm_feature_var = SVM_feature_var,
noise_proc = noise_proc_for_null,
out_of_sample_only = TRUE,
use_inv_prob_weighting = use_inv_prob_weighting,
shuffle_labels = FALSE)
group_wise_SVM_CV_weighting_list <- list.append(group_wise_SVM_CV_weighting_list, repeat_res)
group_wise_SVM_CV_weighting_list <- list()
for (idx in 1) {
#for (idx in 1:length(sample_folds)) {
tryCatch({
repeat_res <<- run_pairwise_cv_svm_by_input_var(pairwise_data = pyspi_data,
dataset_ID = dataset_ID,
data_path = data_path,
rdata_path = rdata_path,
sample_metadata = sample_metadata,
SPI_directionality = SPI_directionality,
svm_kernel = kernel,
num_k_folds = 10,
flds = sample_folds[[idx]],
repeat_number = idx,
grouping_var = grouping_var,
svm_feature_var = SVM_feature_var,
noise_proc = noise_proc_for_null,
out_of_sample_only = TRUE,
use_inv_prob_weighting = use_inv_prob_weighting,
shuffle_labels = FALSE)
}, error = function(e) {
cat("Error for repeat number:", idx, "\n")
message(e)
repeat_res <<- data.frame()
})
group_wise_SVM_CV_weighting_list <- list.append(group_wise_SVM_CV_weighting_list, repeat_res)
}
group_wise_SVM_CV_weighting <- do.call(plyr::rbind.fill, group_wise_SVM_CV_weighting_list)
group_wise_SVM_CV_weighting_list <- list()
for (idx in 1) {
#for (idx in 1:length(sample_folds)) {
repeat_res <- run_pairwise_cv_svm_by_input_var(pairwise_data = pyspi_data,
dataset_ID = dataset_ID,
data_path = data_path,
rdata_path = rdata_path,
sample_metadata = sample_metadata,
SPI_directionality = SPI_directionality,
svm_kernel = kernel,
num_k_folds = 10,
flds = sample_folds[[idx]],
repeat_number = idx,
grouping_var = grouping_var,
svm_feature_var = SVM_feature_var,
noise_proc = noise_proc_for_null,
out_of_sample_only = TRUE,
use_inv_prob_weighting = use_inv_prob_weighting,
shuffle_labels = FALSE)
group_wise_SVM_CV_weighting_list <- list.append(group_wise_SVM_CV_weighting_list, repeat_res)
}
group_wise_SVM_CV_weighting_list <- list()
for (idx in 1:length(sample_folds)) {
repeat_res <- run_pairwise_cv_svm_by_input_var(pairwise_data = pyspi_data,
dataset_ID = dataset_ID,
data_path = data_path,
rdata_path = rdata_path,
sample_metadata = sample_metadata,
SPI_directionality = SPI_directionality,
svm_kernel = kernel,
num_k_folds = 10,
flds = sample_folds[[idx]],
repeat_number = idx,
grouping_var = grouping_var,
svm_feature_var = SVM_feature_var,
noise_proc = noise_proc_for_null,
out_of_sample_only = TRUE,
use_inv_prob_weighting = use_inv_prob_weighting,
shuffle_labels = FALSE)
group_wise_SVM_CV_weighting_list <- list.append(group_wise_SVM_CV_weighting_list, repeat_res)
}
group_wise_SVM_CV_weighting <- do.call(plyr::rbind.fill, group_wise_SVM_CV_weighting_list)
saveRDS(group_wise_SVM_CV_weighting, file=paste0(rdata_path,
sprintf("%s_wise_CV_linear_SVM_%s_%s.Rds",
grouping_var,
pairwise_feature_set,
weighting_name)))
group_wise_SVM_balanced_accuracy <- group_wise_SVM_CV_weighting %>%
group_by(grouping_var, Noise_Proc, Sample_Type, fold_number, repeat_number) %>%
summarise(accuracy = sum(Prediction_Correct) / n(),
balanced_accuracy = caret::confusionMatrix(data = Predicted_Diagnosis,
reference = Actual_Diagnosis)$byClass[["Balanced Accuracy"]])
saveRDS(group_wise_SVM_balanced_accuracy, file=paste0(rdata_path, sprintf("%s_wise_CV_linear_SVM_%s_%s_balacc.Rds",
grouping_var,
pairwise_feature_set,
weighting_name)))
group_wise_SVM_balanced_accuracy_across_repeats <- group_wise_SVM_balanced_accuracy %>%
group_by(grouping_var, Noise_Proc, Sample_Type) %>%
summarise(mean_accuracy = mean(accuracy, na.rm=T),
mean_balanced_accuracy = mean(balanced_accuracy, na.rm=T)) %>%
dplyr::rename("accuracy" = "mean_accuracy",
"balanced_accuracy" = "mean_balanced_accuracy")
saveRDS(group_wise_SVM_balanced_accuracy_across_repeats, file=paste0(rdata_path, sprintf("%s_wise_CV_linear_SVM_%s_%s_balacc_across_repeats.Rds",
grouping_var,
pairwise_feature_set,
weighting_name)))
